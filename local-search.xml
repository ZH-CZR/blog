<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>权限组角色功能</title>
    <link href="/2023/05/25/%E6%9D%83%E9%99%90%E7%BB%84%E8%A7%92%E8%89%B2%E5%8A%9F%E8%83%BD/"/>
    <url>/2023/05/25/%E6%9D%83%E9%99%90%E7%BB%84%E8%A7%92%E8%89%B2%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h2 id="权限组角色功能"><a href="#权限组角色功能" class="headerlink" title="权限组角色功能"></a>权限组角色功能</h2><ul><li>controller</li></ul><p>对于权限进行管理</p><h4 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h4><ul><li>增加权限组信息</li><li>单例删除权限组信息</li><li>批量删除权限组信息</li><li>查询权限组信息</li><li>修改权限组信息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.czr.common.RspBean;<br><span class="hljs-keyword">import</span> com.czr.pojo.Role;<br><span class="hljs-keyword">import</span> com.czr.service.IRoleService;<br><span class="hljs-keyword">import</span> io.swagger.annotations.Api;<br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiOperation;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 前端控制器</span><br><span class="hljs-comment"> * &lt;/p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> czr</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2023-05-17</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/system/basic/role&quot;)</span><br><span class="hljs-meta">@Api(tags = &quot;RoleController&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RoleController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IRoleService roleService;<br><br>    <span class="hljs-meta">@ApiOperation(value = &quot;增加权限组信息&quot;)</span><br>    <span class="hljs-meta">@PostMapping(&quot;/&quot;)</span><br>    <span class="hljs-keyword">public</span> RspBean <span class="hljs-title function_">addRole</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Role role)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!role.getName().startsWith(<span class="hljs-string">&quot;ROLE_&quot;</span>)) &#123;<br>            role.setName(<span class="hljs-string">&quot;ROLE_&quot;</span> + role.getName());<br>        &#125;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">save</span> <span class="hljs-operator">=</span> roleService.save(role);<br>        <span class="hljs-keyword">if</span> (save) &#123;<br>            <span class="hljs-keyword">return</span> RspBean.success(<span class="hljs-string">&quot;success!&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> RspBean.error(<span class="hljs-string">&quot;false!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@ApiOperation(value = &quot;单例删除权限组&quot;)</span><br>    <span class="hljs-meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> RspBean <span class="hljs-title function_">delRoleById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">remove</span> <span class="hljs-operator">=</span> roleService.removeById(id);<br>        <span class="hljs-keyword">if</span> (remove) &#123;<br>            <span class="hljs-keyword">return</span> RspBean.success(<span class="hljs-string">&quot;success!&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> RspBean.error(<span class="hljs-string">&quot;false!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@ApiOperation(value = &quot;批量删除权限&quot;)</span><br>    <span class="hljs-meta">@DeleteMapping(&quot;/&quot;)</span><br>    <span class="hljs-keyword">public</span> RspBean <span class="hljs-title function_">delRoleByIds</span><span class="hljs-params">(Integer[] ids)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">remove</span> <span class="hljs-operator">=</span> roleService.removeByIds(Arrays.asList(ids));<br>        <span class="hljs-keyword">if</span> (remove) &#123;<br>            <span class="hljs-keyword">return</span> RspBean.success(<span class="hljs-string">&quot;success!&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> RspBean.error(<span class="hljs-string">&quot;false!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@ApiOperation(value = &quot;查询权限组信息&quot;)</span><br>    <span class="hljs-meta">@GetMapping(&quot;/&quot;)</span><br>    <span class="hljs-keyword">public</span> RspBean <span class="hljs-title function_">getRole</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Role&gt; roles = roleService.list();<br>        <span class="hljs-keyword">if</span> (!roles.isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> RspBean.success(<span class="hljs-string">&quot;success!&quot;</span>, roles);<br>        &#125;<br>        <span class="hljs-keyword">return</span> RspBean.error(<span class="hljs-string">&quot;false!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@ApiOperation(value = &quot;更新权限组&quot;)</span><br>    <span class="hljs-meta">@PutMapping(&quot;/&quot;)</span><br>    <span class="hljs-keyword">public</span> RspBean <span class="hljs-title function_">updateRole</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Role role)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">update</span> <span class="hljs-operator">=</span> roleService.updateById(role);<br>        <span class="hljs-keyword">if</span> (update) &#123;<br>            <span class="hljs-keyword">return</span> RspBean.success(<span class="hljs-string">&quot;success!&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> RspBean.error(<span class="hljs-string">&quot;false!&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>职称管理功能</title>
    <link href="/2023/05/25/%E8%81%8C%E7%A7%B0%E7%AE%A1%E7%90%86%E5%8A%9F%E8%83%BD/"/>
    <url>/2023/05/25/%E8%81%8C%E7%A7%B0%E7%AE%A1%E7%90%86%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h2 id="职称管理功能"><a href="#职称管理功能" class="headerlink" title="职称管理功能"></a>职称管理功能</h2><ul><li>controller</li><li>pojo</li></ul><p>对于职称进行管理</p><h4 id="pojo"><a href="#pojo" class="headerlink" title="pojo"></a>pojo</h4><p>主要是在<em>创建时间</em>字段上进行json格式化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;<br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiModel;<br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiModelProperty;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.EqualsAndHashCode;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;/p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> czr</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2023-05-17</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@EqualsAndHashCode(callSuper = false)</span><br><span class="hljs-meta">@TableName(&quot;t_joblevel&quot;)</span><br><span class="hljs-meta">@ApiModel(value = &quot;Joblevel对象&quot;, description = &quot;&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Joblevel</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;id&quot;)</span><br>    <span class="hljs-meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;职称名称&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;职称等级&quot;)</span><br>    <span class="hljs-keyword">private</span> String titleLevel;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;创建时间&quot;)</span><br>    <span class="hljs-meta">@JsonFormat(pattern = &quot;yyyy-MM-dd&quot;, timezone = &quot;Asia/Shanghai&quot;)</span><br>    <span class="hljs-keyword">private</span> LocalDateTime createDate;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;是否启用&quot;)</span><br>    <span class="hljs-keyword">private</span> Boolean enabled;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h4><ul><li>增加职称信息</li><li>单例删除职称信息</li><li>批量删除职称信息</li><li>查询职称信息</li><li>修改职称信息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.czr.common.RspBean;<br><span class="hljs-keyword">import</span> com.czr.pojo.Joblevel;<br><span class="hljs-keyword">import</span> com.czr.service.IJoblevelService;<br><span class="hljs-keyword">import</span> io.swagger.annotations.Api;<br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiOperation;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 前端控制器</span><br><span class="hljs-comment"> * &lt;/p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> czr</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2023-05-17</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/system/basic/jobLevel&quot;)</span><br><span class="hljs-meta">@Api(tags = &quot;JoblevelController&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JoblevelController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IJoblevelService joblevelService;<br><br>    <span class="hljs-meta">@ApiOperation(value = &quot;增加职称信息&quot;)</span><br>    <span class="hljs-meta">@PostMapping(&quot;/&quot;)</span><br>    <span class="hljs-keyword">public</span> RspBean <span class="hljs-title function_">addJobLevel</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Joblevel joblevel)</span> &#123;<br>        joblevel.setCreateDate(LocalDateTime.now());<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">save</span> <span class="hljs-operator">=</span> joblevelService.save(joblevel);<br>        <span class="hljs-keyword">if</span> (save) &#123;<br>            <span class="hljs-keyword">return</span> RspBean.success(<span class="hljs-string">&quot;添加成功&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> RspBean.error(<span class="hljs-string">&quot;添加失败&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@ApiOperation(value = &quot;单例删除职称信息&quot;)</span><br>    <span class="hljs-meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> RspBean <span class="hljs-title function_">delJobLevelById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">remove</span> <span class="hljs-operator">=</span> joblevelService.removeById(id);<br>        <span class="hljs-keyword">if</span> (remove) &#123;<br>            <span class="hljs-keyword">return</span> RspBean.success(<span class="hljs-string">&quot;删除成功&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> RspBean.error(<span class="hljs-string">&quot;删除失败&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@ApiOperation(value = &quot;批量删除职称信息&quot;)</span><br>    <span class="hljs-meta">@DeleteMapping(&quot;/&quot;)</span><br>    <span class="hljs-keyword">public</span> RspBean <span class="hljs-title function_">delJobLevelByIds</span><span class="hljs-params">(Integer[] ids)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">remove</span> <span class="hljs-operator">=</span> joblevelService.removeByIds(Arrays.asList(ids));<br>        <span class="hljs-keyword">if</span> (remove) &#123;<br>            <span class="hljs-keyword">return</span> RspBean.success(<span class="hljs-string">&quot;删除成功&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> RspBean.error(<span class="hljs-string">&quot;删除失败&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@ApiOperation(value = &quot;查询职称信息&quot;)</span><br>    <span class="hljs-meta">@GetMapping(&quot;/&quot;)</span><br>    <span class="hljs-keyword">public</span> RspBean <span class="hljs-title function_">getJobLevel</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Joblevel&gt; list = joblevelService.list();<br>        <span class="hljs-keyword">if</span> (!list.isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> RspBean.success(<span class="hljs-string">&quot;查询成功&quot;</span>, list);<br>        &#125;<br>        <span class="hljs-keyword">return</span> RspBean.error(<span class="hljs-string">&quot;查询失败&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@ApiOperation(value = &quot;更新职称信息&quot;)</span><br>    <span class="hljs-meta">@PutMapping(&quot;/&quot;)</span><br>    <span class="hljs-keyword">public</span> RspBean <span class="hljs-title function_">updateJobLevel</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Joblevel joblevel)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">update</span> <span class="hljs-operator">=</span> joblevelService.updateById(joblevel);<br>        <span class="hljs-keyword">if</span> (update) &#123;<br>            <span class="hljs-keyword">return</span> RspBean.success(<span class="hljs-string">&quot;更新成功&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> RspBean.error(<span class="hljs-string">&quot;更新失败&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>测试接口的时候碰到一个问题 ：Data truncated for column ‘titleLevel’ at row 1 </p><p>解决思路：</p><p>查看数据库发现是枚举类型</p><p><img src="https://gitee.com/czrgitee/typora-drawing-bed/raw/master/image/202305250937372.png" alt="image-20230525093721216"></p><p>测试接口传值时候需要逗号隔开</p><p><img src="https://gitee.com/czrgitee/typora-drawing-bed/raw/master/image/202305250938486.png" alt="image-20230525093840417"></p><p>controller中接收数组时，不需要添加@PathVariable注解</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>全局异常处理</title>
    <link href="/2023/05/24/%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <url>/2023/05/24/%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="全局异常处理"><a href="#全局异常处理" class="headerlink" title="全局异常处理"></a>全局异常处理</h2><p>在Java应用程序中，全局异常处理可以帮助我们捕获和处理未处理的异常。</p><p>异常分为<em>运行时异常</em>和<em>编译时异常</em></p><p>编译时异常一般通过try catch捕获</p><p>运行时异常只能尽量减少</p><p>异常不管在什么地方都有可能存在，全局异常处理能将所有异常处理取出，进行统一维护，正确返回一个友好的提示信息</p><p>有两种实现方式，一般共同存在</p><ul><li><p>一种是通过注解（@controllerAdvis、@exceptionHandler），只能处理控制器抛出的异常</p></li><li><p>一种是通过类，errorController类，可以处理所有的异常</p></li></ul><p><img src="https://gitee.com/czrgitee/typora-drawing-bed/raw/master/image/202305241735742.png" alt="image-20230524173535669"></p><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.czr.common.RspBean;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;<br><br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.SQLIntegrityConstraintViolationException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> czr</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> v1.0.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Package</span> : com.czr.exception</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> : 全局异常处理</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span> on : 2023/5/24 17:30</span><br><span class="hljs-comment"> **/</span><br><br><span class="hljs-meta">@RestControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalException</span> &#123;<br><br>    <span class="hljs-meta">@ExceptionHandler(SQLException.class)</span><br>    <span class="hljs-keyword">public</span> RspBean <span class="hljs-title function_">mySQLException</span><span class="hljs-params">(SQLException e)</span> &#123;<br>        <span class="hljs-comment">//指定异常</span><br>        <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> SQLIntegrityConstraintViolationException) &#123;<br>            <span class="hljs-keyword">return</span> RspBean.error(<span class="hljs-string">&quot;操作失败，该数据有关联数据！&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> RspBean.error(<span class="hljs-string">&quot;数据库异常&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>效果</p><p><img src="https://gitee.com/czrgitee/typora-drawing-bed/raw/master/image/202305241737050.png" alt="image-20230524173701989"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>职位管理功能</title>
    <link href="/2023/05/24/%E8%81%8C%E4%BD%8D%E7%AE%A1%E7%90%86%E5%8A%9F%E8%83%BD/"/>
    <url>/2023/05/24/%E8%81%8C%E4%BD%8D%E7%AE%A1%E7%90%86%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h2 id="职位管理功能"><a href="#职位管理功能" class="headerlink" title="职位管理功能"></a>职位管理功能</h2><ul><li>controller</li><li>pojo</li></ul><h4 id="首先在Position实体类中添加日期格式化，返回年月日的json格式"><a href="#首先在Position实体类中添加日期格式化，返回年月日的json格式" class="headerlink" title="首先在Position实体类中添加日期格式化，返回年月日的json格式"></a>首先在Position实体类中添加日期格式化，返回年月日的json格式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiModelProperty(value = &quot;创建时间&quot;)</span><br><span class="hljs-meta">@JsonFormat(pattern = &quot;yyyy-MM-dd&quot;, timezone = &quot;Asia/Shanghai&quot;)</span><br><span class="hljs-keyword">private</span> LocalDateTime createDate;<br></code></pre></td></tr></table></figure><h2 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h2><p>要求使用menu中存在的请求路径，否则会报权限错误</p><ul><li>增加职员信息</li><li>单例删除职员信息</li><li>批量删除职员信息</li><li>查询职员信息</li><li>修改职员信息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.czr.common.RspBean;<br><span class="hljs-keyword">import</span> com.czr.pojo.Position;<br><span class="hljs-keyword">import</span> com.czr.service.IPositionService;<br><span class="hljs-keyword">import</span> io.swagger.annotations.Api;<br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiOperation;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 前端控制器</span><br><span class="hljs-comment"> * &lt;/p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> czr</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2023-05-17</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/system/cfg&quot;)</span><br><span class="hljs-meta">@Api(tags = &quot;PositionController&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PositionController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IPositionService positionService;<br><br>    <span class="hljs-meta">@ApiOperation(value = &quot;增加职位信息&quot;)</span><br>    <span class="hljs-meta">@PostMapping(&quot;/&quot;)</span><br>    <span class="hljs-keyword">public</span> RspBean <span class="hljs-title function_">addPosition</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Position position)</span> &#123;<br>        position.setCreateDate(LocalDateTime.now());  <span class="hljs-comment">//获取当前系统时间</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">save</span> <span class="hljs-operator">=</span> positionService.save(position);<br>        <span class="hljs-keyword">if</span> (save) &#123;<br>            <span class="hljs-keyword">return</span> RspBean.success(<span class="hljs-string">&quot;增加职位信息成功&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> RspBean.error(<span class="hljs-string">&quot;增加职位信息失败&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@ApiOperation(value = &quot;删除职位信息&quot;)</span><br>    <span class="hljs-meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> RspBean <span class="hljs-title function_">delPositionById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">remove</span> <span class="hljs-operator">=</span> positionService.removeById(id);<br>        <span class="hljs-keyword">if</span> (remove) &#123;<br>            <span class="hljs-keyword">return</span> RspBean.success(<span class="hljs-string">&quot;删除职位信息成功&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> RspBean.error(<span class="hljs-string">&quot;删除职位信息失败&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@ApiOperation(value = &quot;批量删除职位信息&quot;)</span><br>    <span class="hljs-meta">@DeleteMapping(&quot;/&quot;)</span><br>    <span class="hljs-keyword">public</span> RspBean <span class="hljs-title function_">delPositionByIds</span><span class="hljs-params">(Integer[] ids)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">remove</span> <span class="hljs-operator">=</span> positionService.removeByIds(Arrays.asList(ids));<br>        <span class="hljs-keyword">if</span> (remove) &#123;<br>            <span class="hljs-keyword">return</span> RspBean.success(<span class="hljs-string">&quot;批量删除职位信息成功&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> RspBean.error(<span class="hljs-string">&quot;批量删除职位信息失败&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@ApiOperation(value = &quot;查询职位信息&quot;)</span><br>    <span class="hljs-meta">@GetMapping(&quot;/&quot;)</span><br>    <span class="hljs-keyword">public</span> RspBean <span class="hljs-title function_">getPosition</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Position&gt; list = positionService.list();<br>        <span class="hljs-keyword">if</span> (!list.isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> RspBean.success(<span class="hljs-string">&quot;批量删除职位信息成功&quot;</span>, list);<br>        &#125;<br>        <span class="hljs-keyword">return</span> RspBean.error(<span class="hljs-string">&quot;批量删除职位信息失败&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@ApiOperation(value = &quot;更新职位信息&quot;)</span><br>    <span class="hljs-meta">@PutMapping(&quot;/&quot;)</span><br>    <span class="hljs-keyword">public</span> RspBean <span class="hljs-title function_">updatePosition</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Position position)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">update</span> <span class="hljs-operator">=</span> positionService.updateById(position);<br>        <span class="hljs-keyword">if</span> (update) &#123;<br>            <span class="hljs-keyword">return</span> RspBean.success(<span class="hljs-string">&quot;更新职位信息成功&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> RspBean.error(<span class="hljs-string">&quot;更新职位信息失败&quot;</span>);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>关于hexo和fluid碰到的问题</title>
    <link href="/2023/05/24/%E5%85%B3%E4%BA%8Ehexo%E5%92%8Cfluid%E7%A2%B0%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2023/05/24/%E5%85%B3%E4%BA%8Ehexo%E5%92%8Cfluid%E7%A2%B0%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="1-上传不了gitee，需要在根目录下载插件，然后配置"><a href="#1-上传不了gitee，需要在根目录下载插件，然后配置" class="headerlink" title="1.上传不了gitee，需要在根目录下载插件，然后配置"></a>1.上传不了gitee，需要在根目录下载插件，然后配置</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cmd">npm install hexo-deployer-git --save<br><br># Deployment<br>## Docs: https://hexo.io/docs/one-command-deployment<br><span class="hljs-function">deploy:</span><br><span class="hljs-function">  <span class="hljs-title">type</span>: <span class="hljs-title">git</span></span><br><span class="hljs-function">  <span class="hljs-title">repo</span>: <span class="hljs-title">git</span>@<span class="hljs-title">gitee.com:xxx</span>/<span class="hljs-title">xxx.git</span></span><br><span class="hljs-function">  <span class="hljs-title">branch</span>: <span class="hljs-title">master</span></span><br><span class="hljs-function">  </span><br><span class="hljs-function">#重新上传</span><br><span class="hljs-function"><span class="hljs-title">hexo</span> <span class="hljs-title">clean</span></span><br><span class="hljs-function"><span class="hljs-title">hexo</span> <span class="hljs-title">g</span> -<span class="hljs-title">d</span></span><br></code></pre></td></tr></table></figure><h3 id="2-执行hexo-clean报错"><a href="#2-执行hexo-clean报错" class="headerlink" title="2.执行hexo clean报错"></a>2.执行hexo clean报错</h3><p><img src="https://gitee.com/czrgitee/typora-drawing-bed/raw/master/image/202305241559186.png" alt="image-20230524155854070"></p><ul><li>这个是因为fluid1.9.4版本的highlight.js与1.9.0版本的不一致了，多了个css，获取不到，所以无法加载</li></ul><p><img src="https://gitee.com/czrgitee/typora-drawing-bed/raw/master/image/202305241601996.png" alt="image-20230524160118913"></p><p>解决方法：下一个1.9.0的包，取出highlight.js并替换掉原来的，应该就没问题了</p><h3 id="3-关于依赖的问题"><a href="#3-关于依赖的问题" class="headerlink" title="3.关于依赖的问题"></a>3.关于依赖的问题</h3><p>清空缓存、删除现有依赖，重新npm install</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd">npm cache clean --force<br>rm -rf node_modules<br>rm package-lock.json<br>npm install<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>认证授权</title>
    <link href="/2023/05/23/%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83/"/>
    <url>/2023/05/23/%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83/</url>
    
    <content type="html"><![CDATA[<h2 id="jwt-token工具类编写"><a href="#jwt-token工具类编写" class="headerlink" title="jwt token工具类编写"></a>jwt token工具类编写</h2><ul><li>生成token</li><li>验证token是否有效</li><li>判断token是否过期</li><li>判断token是否可以被刷新</li><li>刷新token</li></ul><h4 id="定义工具类"><a href="#定义工具类" class="headerlink" title="定义工具类"></a>定义工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtTokenUtil</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CLAIM_KEY_USERNAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;sub&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CLAIM_KEY_CREATED</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;created&quot;</span>;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jwt.secret&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String secret;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jwt.expiration&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> Long expiration;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="生成token"><a href="#生成token" class="headerlink" title="生成token"></a>生成token</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据用户信息生成token</span><br><span class="hljs-comment"> * 这段代码是一个生成jwt token的方法，它接受一个UserDetails对象作为参数。</span><br><span class="hljs-comment"> * 在该方法中，首先创建了一个Map对象claims，用于存储token中的payload部分（包含用户信息和其他自定义数据）。</span><br><span class="hljs-comment"> * 然后将用户名和当前时间加入到claims中。</span><br><span class="hljs-comment"> * 最后调用generateToken()方法，将claims作为参数传入，返回一个生成的jwt token。</span><br><span class="hljs-comment"> * 具体generateToken()方法的实现可能需要查看代码其他部分</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> userDetails</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">generateToken</span><span class="hljs-params">(UserDetails userDetails)</span> &#123;<br>    Map&lt;String, Object&gt; claims = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    claims.put(CLAIM_KEY_USERNAME, userDetails.getUsername());<br>    claims.put(CLAIM_KEY_CREATED, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    <span class="hljs-keyword">return</span> generateToken(claims);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据负载生成JWT Token</span><br><span class="hljs-comment"> * 在这段代码中，首先调用Jwts.builder()方法创建一个JwtBuilder对象，然后使用setClaims()方法将传入的claims设置到该JwtBuilder对象中。</span><br><span class="hljs-comment"> * 接着调用setExpiration()方法设置Token的过期时间，generateExpirationDate()方法应该是用于计算过期时间的辅助方法。</span><br><span class="hljs-comment"> * 最后，使用signWith()方法指定签名算法和密钥进行签名，并调用compact()方法生成Token。</span><br><span class="hljs-comment"> * 需要注意的是，这里使用了HS512算法进行签名，这是一种比较新的、基于椭圆曲线的数字签名算法。</span><br><span class="hljs-comment"> * 同时，secret变量应该是存储在服务器端的一个私密密钥，用于对Token进行签名和验证。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> claims</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> String <span class="hljs-title function_">generateToken</span><span class="hljs-params">(Map&lt;String, Object&gt; claims)</span> &#123;<br>    <span class="hljs-keyword">return</span> Jwts.builder()<br>            .setClaims(claims)  <span class="hljs-comment">//使用setClaims()方法将传入的claims设置到该JwtBuilder对象中</span><br>            .setExpiration(generateExpirationDate())  <span class="hljs-comment">//调用setExpiration()方法设置Token的过期时间</span><br>            .signWith(SignatureAlgorithm.HS512, secret)<br>            .compact();<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生成token过期时间</span><br><span class="hljs-comment"> * 这段代码是用于生成JWT Token的过期时间的辅助方法，它返回一个Date对象，该对象表示当前时间加上过期时间。</span><br><span class="hljs-comment"> * 在这个方法中，通过调用System.currentTimeMillis()获取当前时间的毫秒数，然后加上expiration（以秒为单位）乘以1000的结果，得到Token的过期时间。</span><br><span class="hljs-comment"> * 最后，将该时间转换成Date对象并返回。</span><br><span class="hljs-comment"> * 需要注意的是，这里使用了System.currentTimeMillis()方法获取当前时间，这种方式获取的时间是相对于1970年1月1日00:00:00 UTC的毫秒数。</span><br><span class="hljs-comment"> * 而expiration变量应该是以秒为单位的整数，因此需要将其乘以1000转换为毫秒。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> Date <span class="hljs-title function_">generateExpirationDate</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis() + expiration * <span class="hljs-number">1000</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="验证token是否有效"><a href="#验证token是否有效" class="headerlink" title="验证token是否有效"></a>验证token是否有效</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 验证token是否有效</span><br><span class="hljs-comment">     * 这是一个用于验证token是否有效的方法。该方法接收两个参数：token和userDetails对象，</span><br><span class="hljs-comment">     * 其中，token是用户请求时传递的令牌，而userDetails则是表示已认证的用户详细信息的对象。</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * 该方法首先调用getUserNameFormToken方法从token中解析出用户名，然后将解析出的用户名与userDetails对象中的用户名进行比较，</span><br><span class="hljs-comment">     * 如果两者相同，则说明该token是有效的。</span><br><span class="hljs-comment">     * 同时，该方法还会调用isTokenExpired方法来检查token是否过期，如果token已经过期，则该方法也会返回false。</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * 最终，如果token有效且未过期，则该方法返回true，否则返回false。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> token</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userDetails</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">validateToken</span><span class="hljs-params">(String token, UserDetails userDetails)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> getUserNameFormToken(token);<br>        <span class="hljs-keyword">return</span> username.equals(userDetails.getUsername()) &amp;&amp;<br>                !isTokenExpired(token);<br>    &#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从token中获取登录用户名</span><br><span class="hljs-comment">     * 这段代码是一个获取JWT令牌中的用户名的方法。</span><br><span class="hljs-comment">     * 其中，参数token是JWT令牌字符串，方法内部调用了getClaimsFromToken(token)方法来解析JWT令牌，并从中获取用户名信息。</span><br><span class="hljs-comment">     * 如果解析失败或者用户名为空，则返回null。具体实现需要依赖于相应的JWT库或者自己手动解析JWT令牌。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> token</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUserNameFormToken</span><span class="hljs-params">(String token)</span> &#123;<br>        String username;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Claims</span> <span class="hljs-variable">claims</span> <span class="hljs-operator">=</span> getClaimsFromToken(token);<br>            username = claims.getSubject();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            username = <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从token中获取JWT中的负载</span><br><span class="hljs-comment">     * 这段代码通过 Jwts.parser() 创建一个 JWT 解析器对象，并设置签名密钥为 secret（即用于生成和验证 JWT Token 的密钥）。</span><br><span class="hljs-comment">     * 然后使用 parseClaimsJws() 方法解析传入的 token 字符串，并调用 getBody() 方法获取其中的 Claims 对象。</span><br><span class="hljs-comment">     * 如果解析过程中发生异常，则将其打印并返回 null。</span><br><span class="hljs-comment">     * 最终，该方法返回解析出的 Claims 对象，以便其他业务逻辑使用其中的用户信息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> token</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Claims <span class="hljs-title function_">getClaimsFromToken</span><span class="hljs-params">(String token)</span> &#123;<br>        <span class="hljs-type">Claims</span> <span class="hljs-variable">claims</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            claims = Jwts.parser()<br>                    .setSigningKey(secret)<br>                    .parseClaimsJws(token)<br>                    .getBody();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> claims;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="判断token是否失效"><a href="#判断token是否失效" class="headerlink" title="判断token是否失效"></a>判断token是否失效</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 判断token是否失效</span><br><span class="hljs-comment"> * 这段代码实现了判断一个令牌（token）是否已经过期的功能。</span><br><span class="hljs-comment"> * 它通过调用 getExpiredDateFromToken() 方法获取该 token 的失效时间，然后使用 before() 方法判断该时间是否在当前时间之前。</span><br><span class="hljs-comment"> * 如果是，说明该 token 已经过期，返回 true；否则返回 false。</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 需要注意的是，这里使用了 Java 中的 Date 类型，表示一个日期和时间。before() 方法是 Date 类中的一个比较方法，用于比较两个日期的先后顺序。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> token</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isTokenExpired</span><span class="hljs-params">(String token)</span> &#123;<br>    <span class="hljs-type">Date</span> <span class="hljs-variable">expiredDate</span> <span class="hljs-operator">=</span> getExpiredDateFromToken(token);  <span class="hljs-comment">//获取失效时间</span><br>    <span class="hljs-keyword">return</span> expiredDate.before(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());  <span class="hljs-comment">//判断是否在当前时间前</span><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 从token中获取过期时间*</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> token</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> Date <span class="hljs-title function_">getExpiredDateFromToken</span><span class="hljs-params">(String token)</span> &#123;<br>    <span class="hljs-type">Claims</span> <span class="hljs-variable">claims</span> <span class="hljs-operator">=</span> getClaimsFromToken(token);<br>    <span class="hljs-keyword">return</span> claims.getExpiration();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="判断token是否可以被刷新"><a href="#判断token是否可以被刷新" class="headerlink" title="判断token是否可以被刷新"></a>判断token是否可以被刷新</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 判断token是否可以被刷新</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> token</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canRefresh</span><span class="hljs-params">(String token)</span> &#123;<br>    <span class="hljs-keyword">return</span> !isTokenExpired(token);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="刷新token"><a href="#刷新token" class="headerlink" title="刷新token"></a>刷新token</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 刷新token</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> token</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">refreshToken</span><span class="hljs-params">(String token)</span> &#123;<br>    <span class="hljs-type">Claims</span> <span class="hljs-variable">claims</span> <span class="hljs-operator">=</span> getClaimsFromToken(token);  <span class="hljs-comment">//从token中获取荷载信息</span><br>    claims.put(CLAIM_KEY_CREATED, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());  <span class="hljs-comment">//放入当前时间</span><br>    <span class="hljs-keyword">return</span> generateToken(claims);  <span class="hljs-comment">//根据负载生成JWT Token</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="公共返回对象"><a href="#公共返回对象" class="headerlink" title="公共返回对象"></a>公共返回对象</h2><ul><li>状态码</li><li>message</li><li>数据对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span>  <span class="hljs-comment">//get/set方法</span><br><span class="hljs-meta">@NoArgsConstructor</span>  <span class="hljs-comment">//无参构造方法</span><br><span class="hljs-meta">@AllArgsConstructor</span>  <span class="hljs-comment">//有参构造方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RspBean</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> code;<br>    <span class="hljs-keyword">private</span> String message;<br>    <span class="hljs-keyword">private</span> Object data;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 成功返回</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> RspBean <span class="hljs-title function_">success</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RspBean</span>(<span class="hljs-number">200</span>, message, <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 成功返回</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> RspBean <span class="hljs-title function_">success</span><span class="hljs-params">(String message, Object data)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RspBean</span>(<span class="hljs-number">200</span>, message, data);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 失败返回</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> RspBean <span class="hljs-title function_">error</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RspBean</span>(<span class="hljs-number">500</span>, message, <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 失败返回</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> RspBean <span class="hljs-title function_">error</span><span class="hljs-params">(String message, Object data)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RspBean</span>(<span class="hljs-number">500</span>, message, data);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="登录后返回token"><a href="#登录后返回token" class="headerlink" title="登录后返回token"></a>登录后返回token</h2><ul><li>controller层</li><li>service层</li><li>pojo</li></ul><h4 id="实体对象"><a href="#实体对象" class="headerlink" title="实体对象"></a>实体对象</h4><ul><li>AdminLogin</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@EqualsAndHashCode(callSuper = false)</span>  <span class="hljs-comment">//表示生成equals和hashCode方法时不考虑父类的属性</span><br><span class="hljs-meta">@Accessors(chain = true)</span>  <span class="hljs-comment">//表示启用链式编程风格，即通过返回当前对象来实现多个操作的连续调用</span><br><span class="hljs-meta">@ApiModel(value = &quot;AdminLogin对象&quot;, description = &quot;&quot;)</span>  <span class="hljs-comment">//描述一个对象的模型</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AdminLogin</span> &#123;<br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;用户名&quot;, required = true)</span>  <span class="hljs-comment">//用于生成API文档时显示参数信息</span><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;密码&quot;, required = true)</span>  <span class="hljs-comment">//用于生成API文档时显示参数信息</span><br>    <span class="hljs-keyword">private</span> String password;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Admin</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@EqualsAndHashCode(callSuper = false)</span><br><span class="hljs-meta">@TableName(&quot;t_admin&quot;)</span><br><span class="hljs-meta">@ApiModel(value = &quot;Admin对象&quot;, description = &quot;&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Admin</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>, UserDetails &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;id&quot;)</span><br>    <span class="hljs-meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;姓名&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;手机号码&quot;)</span><br>    <span class="hljs-keyword">private</span> String phone;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;住宅电话&quot;)</span><br>    <span class="hljs-keyword">private</span> String telephone;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;联系地址&quot;)</span><br>    <span class="hljs-keyword">private</span> String address;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;是否启用&quot;)</span><br>    <span class="hljs-keyword">private</span> Boolean enabled;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;用户名&quot;)</span><br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;密码&quot;)</span><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;用户头像&quot;)</span><br>    <span class="hljs-keyword">private</span> String userFace;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;备注&quot;)</span><br>    <span class="hljs-keyword">private</span> String remark;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;角色/权限&quot;)</span><br>    <span class="hljs-meta">@TableField(exist = false)</span><br>    <span class="hljs-keyword">private</span> List&lt;Role&gt; roles;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Collection&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;<br>        List&lt;SimpleGrantedAuthority&gt; authorityList = roles<br>                .stream()<br>                .map(role -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleGrantedAuthority</span>(role.getName()))<br>                .collect(Collectors.toList());<br>        <span class="hljs-keyword">return</span> authorityList;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonExpired</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonLocked</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isCredentialsNonExpired</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEnabled</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> enabled;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h4><ul><li>调用adminService的login方法，传入实体对象AdminLogin与HttpServletRequest</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(value = &quot;登录后返回token&quot;)</span><br><span class="hljs-meta">@PostMapping(&quot;/login&quot;)</span><br><span class="hljs-keyword">public</span> RspBean <span class="hljs-title function_">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> AdminLogin adminLogin, HttpServletRequest request)</span> &#123;<br>    <span class="hljs-keyword">return</span> adminService.login(adminLogin.getUsername(), adminLogin.getPassword(), request);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="service"><a href="#service" class="headerlink" title="service"></a>service</h4><ul><li>userDetailsService接口：用于从外部数据源（如数据库）获取用户信息和权限信息</li><li>实现逻辑是用userDetailsService的loadUserByUsername方法，把用户名从数据源中获取用户信息，并将其封装为一个UserDetails对象返回，UserDetails对象包含了用户名、密码、角色等信息，并且可以自定义扩展其他字段</li><li>只需要调用loadUserByUsername并传入就可以从数据库获取到内容</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 登陆后返回token</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> username</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> password</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> RspBean <span class="hljs-title function_">login</span><span class="hljs-params">(String username, String password, HttpServletRequest request)</span> &#123;<br>    <span class="hljs-comment">//获取到userDetails</span><br>    <span class="hljs-type">UserDetails</span> <span class="hljs-variable">userDetails</span> <span class="hljs-operator">=</span> userDetailsService.loadUserByUsername(username);<br>    System.out.println(userDetails.getPassword());<br>    <span class="hljs-comment">//判断userDetails是否为空，密码是否正确，账号是否启用</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == userDetails || passwordEncoder.matches(password, userDetails.getPassword())) &#123;<br>        <span class="hljs-keyword">return</span> RspBean.error(<span class="hljs-string">&quot;用户名密码不正确&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!userDetails.isEnabled()) &#123;<br>        <span class="hljs-keyword">return</span> RspBean.error(<span class="hljs-string">&quot;账号未启用&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//更新security到全局</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 这段代码是使用Spring Security的身份验证机制，将用户的详细信息、空凭证和权限设置为一个身份验证令牌，并将其设置为当前安全上下文的身份验证。</span><br><span class="hljs-comment">     * 这样可以确保在后续的请求中，系统能够正确地识别已经通过身份验证的用户并授权其访问相应的资源</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">UsernamePasswordAuthenticationToken</span> <span class="hljs-variable">authenticationToken</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordAuthenticationToken</span>(userDetails, <span class="hljs-literal">null</span>, userDetails.getAuthorities());<br>    SecurityContextHolder.getContext().setAuthentication(authenticationToken);<br><br>    <span class="hljs-comment">//生成token</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> jwtTokenUtil.generateToken(userDetails);<br>    Map&lt;String, String&gt; tokenMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    tokenMap.put(<span class="hljs-string">&quot;token&quot;</span>, token);<br>    tokenMap.put(<span class="hljs-string">&quot;tokenHead&quot;</span>, tokenHead);<br>    <span class="hljs-keyword">return</span> RspBean.success(<span class="hljs-string">&quot;登录成功&quot;</span>, tokenMap);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="config"><a href="#config" class="headerlink" title="config"></a>config</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * protected void configure(AuthenticationManagerBuilder auth)：</span><br><span class="hljs-comment"> * 这个方法是用来配置AuthenticationManagerBuilder对象，它负责构建AuthenticationManager对象，用于处理用户认证。</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * throws Exception：这个方法可能会抛出异常，需要在调用该方法的地方进行异常处理。</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * auth.userDetailsService(userDetailsService())：这个方法指定了一个UserDetailsService实现类的实例，用于加载用户信息。</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * passwordEncoder()：这个方法返回一个PasswordEncoder实现类的实例，用于对用户密码进行编码和解码。</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 总之，这段代码的作用是通过userDetailsService()方法加载用户信息，并使用passwordEncoder()方法对用户密码进行加密，</span><br><span class="hljs-comment"> * 从而构建一个AuthenticationManager对象，用于处理用户认证。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> auth</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    auth.userDetailsService(userDetailsService()).passwordEncoder(passwordEncoder());<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> http</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//使用jwt不需要使用csrf</span><br>    http.csrf().disable()  <span class="hljs-comment">//禁用跨域请求伪造保护，因为此处采用了 JWT 方式进行认证</span><br>            .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)  <span class="hljs-comment">//禁用 session，因为使用 JWT 进行认证，不需要记录用户会话状态</span><br>            .and()<br>            .authorizeRequests()  <span class="hljs-comment">//基于请求授权访问</span><br>            <span class="hljs-comment">//允许登录访问</span><br>            .anyRequest().authenticated()  <span class="hljs-comment">//除了上面所有请求都要拦截对除 /login 和 /logout 之外的所有请求进行身份验证</span><br>            <span class="hljs-comment">//动态权限配置</span><br>            .withObjectPostProcessor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectPostProcessor</span>&lt;FilterSecurityInterceptor&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> &lt;O <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FilterSecurityInterceptor</span>&gt; O <span class="hljs-title function_">postProcess</span><span class="hljs-params">(O object)</span> &#123;<br>                    object.setAccessDecisionManager(customUrlDecisionManage);<br>                    object.setSecurityMetadataSource(customFilter);<br>                    <span class="hljs-keyword">return</span> object;<br>                &#125;<br>            &#125;)<br>            .and()<br>            .headers().cacheControl(); <span class="hljs-comment">//在响应头中添加缓存控制指令，以避免浏览器缓存敏感数据</span><br><br>    <span class="hljs-comment">//添加登录授权</span><br>    http.addFilterBefore(jwtAuthenticationTokenFilter(), UsernamePasswordAuthenticationFilter.class);<br>    <span class="hljs-comment">//自定义返回类型</span><br>    http.exceptionHandling()<br>            .accessDeniedHandler(restfulAccessDeniedHandler)<br>            .authenticationEntryPoint(restAuthorizationEntryPoint);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 在应用程序中，我们可以使用该PasswordEncoder将用户输入的密码进行加密，然后将其存储到数据库中。</span><br><span class="hljs-comment"> * 当用户登录时，我们可以使用该PasswordEncoder将用户输入的密码与存储在数据库中的加密密码进行比较，以验证用户身份</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> PasswordEncoder <span class="hljs-title function_">passwordEncoder</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="获取当前用户信息"><a href="#获取当前用户信息" class="headerlink" title="获取当前用户信息"></a>获取当前用户信息</h2><h4 id="controller-1"><a href="#controller-1" class="headerlink" title="controller"></a>controller</h4><p>正常调用service层方法进行查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(value = &quot;获取当前登录用户信息&quot;)</span><br><span class="hljs-meta">@GetMapping(&quot;/admin/info&quot;)</span><br><span class="hljs-keyword">public</span> RspBean <span class="hljs-title function_">getUserInfo</span><span class="hljs-params">(Principal principal)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == principal) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> principal.getName();<br>    <span class="hljs-type">Admin</span> <span class="hljs-variable">admin</span> <span class="hljs-operator">=</span> adminService.getAdminByUsername(username);<br>    admin.setPassword(<span class="hljs-literal">null</span>);<br>    <span class="hljs-comment">//返回角色列表信息</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">adminId</span> <span class="hljs-operator">=</span> admin.getId();<br>    List&lt;Role&gt; roles = adminService.getRoles(adminId);<br>    admin.setRoles(roles);<br>    <span class="hljs-keyword">return</span> RspBean.success(<span class="hljs-string">&quot;获取成功&quot;</span>, admin);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="service-1"><a href="#service-1" class="headerlink" title="service"></a>service</h4><p>使用mybatis框架自带的selectOne方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 从数据库中获取用户信息</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> username</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Admin <span class="hljs-title function_">getAdminByUsername</span><span class="hljs-params">(String username)</span> &#123;<br>    <span class="hljs-type">Admin</span> <span class="hljs-variable">admin</span> <span class="hljs-operator">=</span> adminMapper.selectOne(<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;Admin&gt;().eq(<span class="hljs-string">&quot;username&quot;</span>, username).eq(<span class="hljs-string">&quot;enabled&quot;</span>, <span class="hljs-literal">true</span>));<br>    <span class="hljs-keyword">return</span> admin;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="配置security授权登录过滤器"><a href="#配置security授权登录过滤器" class="headerlink" title="配置security授权登录过滤器"></a>配置security授权登录过滤器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.czr.utils.JwtTokenUtil;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;<br><span class="hljs-keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;<br><span class="hljs-keyword">import</span> org.springframework.security.web.authentication.WebAuthenticationDetailsSource;<br><span class="hljs-keyword">import</span> org.springframework.web.filter.OncePerRequestFilter;<br><br><span class="hljs-keyword">import</span> javax.servlet.FilterChain;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * JWT授权过滤器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtAuthenticationTokenFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">OncePerRequestFilter</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JwtTokenUtil jwtTokenUtil;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserDetailsService userDetailsService;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jwt.tokenHeader&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String tokenHeader;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jwt.tokenHead&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String tokenHead;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 这段代码是一个过滤器，在Spring Security框架中，用于对HTTP请求进行拦截和处理。主要功能是从请求头中获取token并校验其有效性，如果有效则把用户信息放入安全上下文中，以便后续的鉴权操作</span><br><span class="hljs-comment">     * 首先从request中取出请求头(tokenHeader)的值，判断是否为null且是否以指定的前缀(tokenHead)开头，如果是，则说明该请求需要进行认证</span><br><span class="hljs-comment">     * 从token中解析出用户名这段代码是一个Spring Security的过滤器，在处理HTTP请求时会对请求头中的token进行验证，如果token有效且合法，则将用户信息保存在SecurityContext中</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilterInternal</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">header</span> <span class="hljs-operator">=</span> request.getHeader(tokenHeader);  <span class="hljs-comment">//从HTTP请求头中获取名为tokenHeader的值，这个值表示token的名称</span><br>        System.out.println(request.getHeaderNames());<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != header &amp;&amp; header.startsWith(tokenHead)) &#123;  <span class="hljs-comment">//判断是否有token，并检查token的开头是否与tokenHead相同</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> header.substring(tokenHead.length());  <span class="hljs-comment">//从token字符串中截取掉tokenHead，得到真正的token</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> jwtTokenUtil.getUserNameFormToken(token);  <span class="hljs-comment">//使用JWT工具类从token中解析出用户名</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != username &amp;&amp; <span class="hljs-literal">null</span> == SecurityContextHolder.getContext().getAuthentication()) &#123;  <span class="hljs-comment">//判断当前SecurityContext中是否已经认证过，如果没有认证过则继续执行以下步骤</span><br>                <span class="hljs-type">UserDetails</span> <span class="hljs-variable">userDetails</span> <span class="hljs-operator">=</span> userDetailsService.loadUserByUsername(username);  <span class="hljs-comment">//通过用户名从用户详情服务中获取用户信息</span><br>                <span class="hljs-keyword">if</span> (jwtTokenUtil.validateToken(token, userDetails)) &#123;  <span class="hljs-comment">//使用JWT工具类验证token的有效性和合法性</span><br>                    <span class="hljs-comment">//创建一个认证令牌，包含了用户信息和权限信息</span><br>                    <span class="hljs-type">UsernamePasswordAuthenticationToken</span> <span class="hljs-variable">authenticationToken</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordAuthenticationToken</span>(userDetails, <span class="hljs-literal">null</span>, userDetails.getAuthorities());<br>                    authenticationToken.setDetails(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WebAuthenticationDetailsSource</span>().buildDetails(request));  <span class="hljs-comment">//将请求对象设置为认证令牌的详细信息</span><br>                    SecurityContextHolder.getContext().setAuthentication(authenticationToken);  <span class="hljs-comment">//将认证令牌保存在SecurityContext中，这样后续操作就可以使用SecurityContext中的用户信息和权限信息了</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        filterChain.doFilter(request, response);  <span class="hljs-comment">//调用下一个过滤器或者目标资源来处理HTTP请求和响应</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="配置中添加过滤器"><a href="#配置中添加过滤器" class="headerlink" title="配置中添加过滤器"></a>配置中添加过滤器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> http</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>    <span class="hljs-comment">//添加登录授权</span><br>    http.addFilterBefore(jwtAuthenticationTokenFilter(), UsernamePasswordAuthenticationFilter.class);<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="security自定义返回结果"><a href="#security自定义返回结果" class="headerlink" title="security自定义返回结果"></a>security自定义返回结果</h2><h4 id="认证失败处理器"><a href="#认证失败处理器" class="headerlink" title="认证失败处理器"></a>认证失败处理器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czr.config;<br><br><span class="hljs-keyword">import</span> com.czr.common.RspBean;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> org.springframework.security.core.AuthenticationException;<br><span class="hljs-keyword">import</span> org.springframework.security.web.AuthenticationEntryPoint;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 认证失败处理器</span><br><span class="hljs-comment"> * 当未登录或者token失效时，自定义返回结果</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RestAuthorizationEntryPoint</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AuthenticationEntryPoint</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commence</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        response.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);  <span class="hljs-comment">//设置响应编码为UTF-8，保证返回的json字符串不会出现乱码</span><br>        response.setContentType(<span class="hljs-string">&quot;application/json&quot;</span>);  <span class="hljs-comment">//设置响应类型为JSON格式，告诉浏览器返回的数据是JSON格式的数据</span><br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> response.getWriter();  <span class="hljs-comment">//获取响应输出流对象，用于向客户端发送响应数据</span><br>        <span class="hljs-type">RspBean</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> RspBean.error(<span class="hljs-string">&quot;尚未登录，请先登录！&quot;</span>);  <span class="hljs-comment">//创建一个RspBean对象，并将错误信息设置为“权限不足！”</span><br>        bean.setCode(<span class="hljs-number">401</span>);  <span class="hljs-comment">//设置HTTP状态码为401，表示未授权访问</span><br>        writer.write(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>().writeValueAsString(bean));  <span class="hljs-comment">//使用Jackson库中的ObjectMapper对象将bean对象转换为JSON格式的字符串</span><br>        writer.flush();  <span class="hljs-comment">//使用Jackson库中的ObjectMapper对象将bean对象转换为JSON格式的字符串</span><br>        writer.close();  <span class="hljs-comment">//关闭输出流并刷新缓冲区，确保响应数据已经成功发送给客户端</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="授权失败处理器"><a href="#授权失败处理器" class="headerlink" title="授权失败处理器"></a>授权失败处理器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.czr.common.RspBean;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> org.springframework.security.access.AccessDeniedException;<br><span class="hljs-keyword">import</span> org.springframework.security.web.access.AccessDeniedHandler;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> czr</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> v1.0.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Package</span> : com.czr.config</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> : 当访问接口没有权限时，自定义返回结果</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span> on : 2023/5/18 13:50</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RestfulAccessDeniedHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AccessDeniedHandler</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        response.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        response.setContentType(<span class="hljs-string">&quot;application/json&quot;</span>);<br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> response.getWriter();<br>        <span class="hljs-type">RspBean</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> RspBean.error(<span class="hljs-string">&quot;权限不足，请联系管理员&quot;</span>);<br>        bean.setCode(<span class="hljs-number">403</span>);<br>        writer.write(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>().writeValueAsString(bean));<br>        writer.flush();<br>        writer.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Security配置类"><a href="#Security配置类" class="headerlink" title="Security配置类"></a>Security配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//自定义返回类型</span><br>    http.exceptionHandling()<br>            .accessDeniedHandler(restfulAccessDeniedHandler)<br>            .authenticationEntryPoint(restAuthorizationEntryPoint);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="swagger2配置并添加Authorize"><a href="#swagger2配置并添加Authorize" class="headerlink" title="swagger2配置并添加Authorize"></a>swagger2配置并添加Authorize</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.PathSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.service.*;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.DocumentationType;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.service.contexts.SecurityContext;<br><span class="hljs-keyword">import</span> springfox.documentation.spring.web.plugins.Docket;<br><span class="hljs-keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> czr</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> v1.0.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Package</span> : com.czr.config</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> : Swagger2配置类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span> on : 2023/5/18 14:41</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableSwagger2</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Swagger2Config</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">createRestApi</span><span class="hljs-params">()</span> &#123;  <span class="hljs-comment">//这个方法名可以任意取，它创建了一个Docket对象，该对象包含了Swagger的配置信息。</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)  <span class="hljs-comment">//Swagger的版本号，现在使用的是2.x版本。</span><br>                .apiInfo(apiInfo())  <span class="hljs-comment">//用来设置API文档的基本信息，比如标题、描述、版本等。其中 apiInfo() 方法返回一个 ApiInfo 对象，里面包含了这些基本信息。</span><br>                .select()  <span class="hljs-comment">//启动选择器。</span><br>                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.czr.controller&quot;</span>))  <span class="hljs-comment">//指定扫描的包路径，只有该路径下的controller类中的接口才会生成API文档。</span><br>                .paths(PathSelectors.any())  <span class="hljs-comment">//指定对所有路径都进行监控和处理。</span><br>                .build()  <span class="hljs-comment">//创建Docket对象的最后一步，它将以上设置和规则应用到生成的文档中。</span><br>                .securityContexts(securityContexts())<br>                .securitySchemes(securitySchemes());<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">apiInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()<br>                .title(<span class="hljs-string">&quot;接口文档&quot;</span>)<br>                .description(<span class="hljs-string">&quot;文档描述&quot;</span>)<br>                .contact(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Contact</span>(<span class="hljs-string">&quot;czr&quot;</span>, <span class="hljs-string">&quot;http://localhost:8888/doc.html&quot;</span>, <span class="hljs-string">&quot;647900765&quot;</span>))<br><span class="hljs-comment">//                .licenseUrl(&quot;http://localhost:8888/doc.html&quot;)</span><br>                .version(<span class="hljs-string">&quot;1.0&quot;</span>)<br>                .build();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 在 Swagger 文档中配置安全方案的方法</span><br><span class="hljs-comment">     * 这段代码定义了一个名为 &quot;Authorization&quot; 的安全方案，使用 header 头部传递认证信息。</span><br><span class="hljs-comment">     * 其中，&quot;Authorization&quot; 是该安全方案的名称，在后续的 API 定义中会用到；&quot;header&quot; 表示认证信息将放置在 HTTP 请求头的 header 中。</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * 最后，该方法返回一个 List 集合，其中包含上述定义的 ApiKey 对象，表示该 API 文档中支持的所有安全方案。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> List&lt;ApiKey&gt; <span class="hljs-title function_">securitySchemes</span><span class="hljs-params">()</span> &#123;<br>        List&lt;ApiKey&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">ApiKey</span> <span class="hljs-variable">apiKey</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiKey</span>(<span class="hljs-string">&quot;Authorization&quot;</span>, <span class="hljs-string">&quot;Authorization&quot;</span>, <span class="hljs-string">&quot;header&quot;</span>);<br>        result.add(apiKey);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> List&lt;SecurityContext&gt; <span class="hljs-title function_">securityContexts</span><span class="hljs-params">()</span> &#123;<br>        List&lt;SecurityContext&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();  <span class="hljs-comment">//创建了一个空的ArrayList，用于存储SecurityContext对象，并将其赋值给result变量</span><br>        result.add(getContextByPath(<span class="hljs-string">&quot;/hello/.*&quot;</span>));  <span class="hljs-comment">//调用getContextByPath方法，并将返回的SecurityContext对象添加到result中。</span><br>        <span class="hljs-keyword">return</span> result;  <span class="hljs-comment">//返回包含SecurityContext对象的List</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用于存储安全相关的上下文信息，比如当前登录用户的信息</span><br><span class="hljs-comment">     * 此处的 securityContexts() 方法返回一个列表，其中包含一个 SecurityContext 对象，该对象通过调用 getContextByPath(&quot;/hello/.*) 方法得到</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pathRegex</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> SecurityContext <span class="hljs-title function_">getContextByPath</span><span class="hljs-params">(String pathRegex)</span> &#123;<br>        <span class="hljs-keyword">return</span> SecurityContext.builder()<br>                .securityReferences(defaulAuth())<br>                .forPaths(PathSelectors.regex(pathRegex))<br>                .build();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用于生成默认的API接口权限认证列表</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> List&lt;SecurityReference&gt; <span class="hljs-title function_">defaulAuth</span><span class="hljs-params">()</span> &#123;<br>        List&lt;SecurityReference&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();  <span class="hljs-comment">//定义一个空的 List&lt;SecurityReference&gt; 对象，用于存放生成的权限认证列表</span><br>        <span class="hljs-type">AuthorizationScope</span> <span class="hljs-variable">AuthorizationScope</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthorizationScope</span>(<span class="hljs-string">&quot;global&quot;</span>, <span class="hljs-string">&quot;all&quot;</span>);  <span class="hljs-comment">//创建一个 AuthorizationScope 对象，该对象表示接口调用所需要的权限范围。在本例中，&quot;global&quot; 表示全局权限，&quot;all&quot; 则表示拥有该权限的用户可以访问所有的接口</span><br>        AuthorizationScope[] AuthorizationScopes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthorizationScope</span>[<span class="hljs-number">1</span>];<br>        AuthorizationScopes[<span class="hljs-number">0</span>] = AuthorizationScope;  <span class="hljs-comment">//创建一个 AuthorizationScope 数组对象 AuthorizationScopes，并将刚才创建的 AuthorizationScope 对象添加到数组中</span><br>        result.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SecurityReference</span>(<span class="hljs-string">&quot;Authorization&quot;</span>, AuthorizationScopes));  <span class="hljs-comment">//将刚才创建的 SecurityReference 对象添加到 result 中，并返回 result</span><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="根据请求URL判断角色，判断用户角色"><a href="#根据请求URL判断角色，判断用户角色" class="headerlink" title="根据请求URL判断角色，判断用户角色"></a>根据请求URL判断角色，判断用户角色</h2><ul><li>CustomFilter（判断用户角色）</li><li>CustomUrlDecisionManage（根据请求判断角色）</li><li>SecurityConfig</li></ul><h4 id="CustomFilter"><a href="#CustomFilter" class="headerlink" title="CustomFilter"></a>CustomFilter</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.czr.pojo.Menu;<br><span class="hljs-keyword">import</span> com.czr.pojo.Role;<br><span class="hljs-keyword">import</span> com.czr.service.IMenuService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.security.access.ConfigAttribute;<br><span class="hljs-keyword">import</span> org.springframework.security.access.SecurityConfig;<br><span class="hljs-keyword">import</span> org.springframework.security.web.FilterInvocation;<br><span class="hljs-keyword">import</span> org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.util.AntPathMatcher;<br><br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> czr</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> v1.0.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Package</span> : com.czr.filter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> : 根据请求的url分析所需要的角色</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span> on : 2023/5/22 14:29</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FilterInvocationSecurityMetadataSource</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IMenuService menuService;<br><br>    <span class="hljs-type">AntPathMatcher</span> <span class="hljs-variable">antPathMatcher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AntPathMatcher</span>();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Collection&lt;ConfigAttribute&gt; <span class="hljs-title function_">getAttributes</span><span class="hljs-params">(Object object)</span> <span class="hljs-keyword">throws</span> IllegalArgumentException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">requestUrl</span> <span class="hljs-operator">=</span> ((FilterInvocation) object).getRequestUrl(); <span class="hljs-comment">//从传入的参数 object 中获取当前请求的URL</span><br>        List&lt;Menu&gt; menus = menuService.getMenusWithRole();  <span class="hljs-comment">//从数据库或其他数据源中获取所有菜单及其对应的角色信息</span><br>        <span class="hljs-keyword">for</span> (Menu menu : menus) &#123;<br>            <span class="hljs-keyword">if</span> (antPathMatcher.match(menu.getUrl(), requestUrl)) &#123;<br>                String[] strings = menu.getRoles().stream().map(Role::getName).toArray(String[]::<span class="hljs-keyword">new</span>);  <span class="hljs-comment">//将该菜单所需要的角色转换为字符串数组</span><br>                <span class="hljs-keyword">return</span> SecurityConfig.createList(strings);  <span class="hljs-comment">// 并返回包含这些角色的 SecurityConfig 对象列表</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//如果url与所有角色都不匹配，就分配一个默认的角色</span><br>        <span class="hljs-keyword">return</span> SecurityConfig.createList(<span class="hljs-string">&quot;ROLE_LOGIN&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Collection&lt;ConfigAttribute&gt; <span class="hljs-title function_">getAllConfigAttributes</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supports</span><span class="hljs-params">(Class&lt;?&gt; clazz)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="CustomUrlDecisionManage"><a href="#CustomUrlDecisionManage" class="headerlink" title="CustomUrlDecisionManage"></a>CustomUrlDecisionManage</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.security.access.AccessDecisionManager;<br><span class="hljs-keyword">import</span> org.springframework.security.access.AccessDeniedException;<br><span class="hljs-keyword">import</span> org.springframework.security.access.ConfigAttribute;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.AnonymousAuthenticationToken;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.InsufficientAuthenticationException;<br><span class="hljs-keyword">import</span> org.springframework.security.core.Authentication;<br><span class="hljs-keyword">import</span> org.springframework.security.core.GrantedAuthority;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.Collection;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> czr</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> v1.0.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Package</span> : com.czr.filter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> : 权限控制，判断用户角色</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span> on : 2023/5/22 15:15</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomUrlDecisionManage</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AccessDecisionManager</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">decide</span><span class="hljs-params">(Authentication authentication, Object object, Collection&lt;ConfigAttribute&gt; configAttributes)</span> <span class="hljs-keyword">throws</span> AccessDeniedException, InsufficientAuthenticationException &#123;<br>        <span class="hljs-keyword">for</span> (ConfigAttribute attribute : configAttributes) &#123;<br>            <span class="hljs-comment">//当前url所需要的角色</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">needRole</span> <span class="hljs-operator">=</span> attribute.getAttribute();<br>            <span class="hljs-comment">//判断是否是登录即可访问的角色，此角色在CustomFilter中设置</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;ROLE_LOGIN&quot;</span>.equals(needRole)) &#123;<br>                <span class="hljs-keyword">if</span> (authentication <span class="hljs-keyword">instanceof</span> AnonymousAuthenticationToken) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AccessDeniedException</span>(<span class="hljs-string">&quot;尚未登陆，请登录&quot;</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">//判断用户角色是否是url所需要的角色</span><br>            Collection&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; authorities = authentication.getAuthorities();<br>            <span class="hljs-keyword">for</span> (GrantedAuthority authority : authorities) &#123;<br>                <span class="hljs-keyword">if</span> (authority.getAuthority().equals(needRole)) &#123;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AccessDeniedException</span>(<span class="hljs-string">&quot;权限不足&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supports</span><span class="hljs-params">(ConfigAttribute attribute)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supports</span><span class="hljs-params">(Class&lt;?&gt; clazz)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="SecurityConfig"><a href="#SecurityConfig" class="headerlink" title="SecurityConfig"></a>SecurityConfig</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.czr.filter.CustomFilter;<br><span class="hljs-keyword">import</span> com.czr.filter.CustomUrlDecisionManage;<br><span class="hljs-keyword">import</span> com.czr.filter.JwtAuthenticationTokenFilter;<br><span class="hljs-keyword">import</span> com.czr.pojo.Admin;<br><span class="hljs-keyword">import</span> com.czr.service.IAdminService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.ObjectPostProcessor;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.WebSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;<br><span class="hljs-keyword">import</span> org.springframework.security.config.http.SessionCreationPolicy;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;<br><span class="hljs-keyword">import</span> org.springframework.security.web.access.intercept.FilterSecurityInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Configuration</span> 是一种注解，用于标记一个类为Spring应用程序上下文中的bean定义提供者。</span><br><span class="hljs-comment"> * 通常，使用<span class="hljs-doctag">@Configuration</span>注解的类也会使用<span class="hljs-doctag">@Bean</span>注解来声明需要创建的bean，并且可以使用其他注解来配置bean的属性。</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Configuration</span> 类可以包含多个<span class="hljs-doctag">@Bean</span>方法，每个方法都对应于一个bean定义。</span><br><span class="hljs-comment"> * 在这些方法中，可以根据需要进行任何必要的初始化和配置，并返回一个实例化的bean对象。</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Configuration</span> 类还可以使用<span class="hljs-doctag">@Import</span>注解来导入其他<span class="hljs-doctag">@Configuration</span>类，以便将它们的bean定义合并到同一个应用程序上下文中。</span><br><span class="hljs-comment"> * 此外，可以使用<span class="hljs-doctag">@Profile</span>注解来指定特定的配置文件或环境下才会生效的bean定义</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CustomFilter customFilter;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CustomUrlDecisionManage customUrlDecisionManage;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> http</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//使用jwt不需要使用csrf</span><br>        http.csrf().disable()  <span class="hljs-comment">//禁用跨域请求伪造保护，因为此处采用了 JWT 方式进行认证</span><br>                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)  <span class="hljs-comment">//禁用 session，因为使用 JWT 进行认证，不需要记录用户会话状态</span><br>                .and()<br>                .authorizeRequests()  <span class="hljs-comment">//基于请求授权访问</span><br>                <span class="hljs-comment">//允许登录访问</span><br>                .anyRequest().authenticated()  <span class="hljs-comment">//除了上面所有请求都要拦截对除 /login 和 /logout 之外的所有请求进行身份验证</span><br>                <span class="hljs-comment">//动态权限配置</span><br>                .withObjectPostProcessor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectPostProcessor</span>&lt;FilterSecurityInterceptor&gt;() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> &lt;O <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FilterSecurityInterceptor</span>&gt; O <span class="hljs-title function_">postProcess</span><span class="hljs-params">(O object)</span> &#123;<br>                        object.setAccessDecisionManager(customUrlDecisionManage);<br>                        object.setSecurityMetadataSource(customFilter);<br>                        <span class="hljs-keyword">return</span> object;<br>                    &#125;<br>                &#125;)<br>                .and()<br>                .headers().cacheControl(); <span class="hljs-comment">//在响应头中添加缓存控制指令，以避免浏览器缓存敏感数据</span><br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>代码生成器</title>
    <link href="/2023/05/22/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/"/>
    <url>/2023/05/22/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CodeGenerator</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * 读取控制台内容</span><br><span class="hljs-comment">     * &lt;/p&gt;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">scanner</span><span class="hljs-params">(String tip)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">help</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        help.append(<span class="hljs-string">&quot;请输入&quot;</span> + tip + <span class="hljs-string">&quot;：&quot;</span>);<br>        System.out.println(help.toString());<br>        <span class="hljs-keyword">if</span> (scanner.hasNext()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">ipt</span> <span class="hljs-operator">=</span> scanner.next();<br>            <span class="hljs-keyword">if</span> (StringUtils.isNotBlank(ipt)) &#123;<br>                <span class="hljs-keyword">return</span> ipt;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisPlusException</span>(<span class="hljs-string">&quot;请输入正确的&quot;</span> + tip + <span class="hljs-string">&quot;！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 代码生成器</span><br>        <span class="hljs-type">AutoGenerator</span> <span class="hljs-variable">mpg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AutoGenerator</span>();<br><br>        <span class="hljs-comment">// 全局配置</span><br>        <span class="hljs-type">GlobalConfig</span> <span class="hljs-variable">gc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GlobalConfig</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">projectPath</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>);<br>        gc.setOutputDir(projectPath + <span class="hljs-string">&quot;/yeb-generator/src/main/java&quot;</span>);<br>        <span class="hljs-comment">//作者</span><br>        gc.setAuthor(<span class="hljs-string">&quot;czr&quot;</span>);<br>        <span class="hljs-comment">//打开输出目录</span><br>        gc.setOpen(<span class="hljs-literal">false</span>);<br>        <span class="hljs-comment">//xml开启 BaseResultMap</span><br>        gc.setBaseResultMap(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//xml 开启BaseColumnList</span><br>        gc.setBaseColumnList(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 实体属性 Swagger2 注解</span><br>        gc.setSwagger2(<span class="hljs-literal">true</span>);<br>        mpg.setGlobalConfig(gc);<br><br>        <span class="hljs-comment">// 数据源配置</span><br>        <span class="hljs-type">DataSourceConfig</span> <span class="hljs-variable">dsc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceConfig</span>();<br>        dsc.setUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/yeb?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia&quot;</span> + <span class="hljs-string">&quot;/Shanghai&quot;</span>);<br>        dsc.setDriverName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        dsc.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        dsc.setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br>        mpg.setDataSource(dsc);<br><br>        <span class="hljs-comment">// 包配置</span><br>        <span class="hljs-type">PackageConfig</span> <span class="hljs-variable">pc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PackageConfig</span>();<br>        pc.setParent(<span class="hljs-string">&quot;com.czr&quot;</span>)<br>                .setEntity(<span class="hljs-string">&quot;pojo&quot;</span>)<br>                .setMapper(<span class="hljs-string">&quot;mapper&quot;</span>)<br>                .setService(<span class="hljs-string">&quot;service&quot;</span>)<br>                .setServiceImpl(<span class="hljs-string">&quot;service.impl&quot;</span>)<br>                .setController(<span class="hljs-string">&quot;controller&quot;</span>);<br>        mpg.setPackageInfo(pc);<br><br>        <span class="hljs-comment">// 自定义配置</span><br>        <span class="hljs-type">InjectionConfig</span> <span class="hljs-variable">cfg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InjectionConfig</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initMap</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-comment">// to do nothing</span><br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-comment">// 如果模板引擎是 freemarker</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">templatePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/templates/mapper.xml.ftl&quot;</span>;<br>        <span class="hljs-comment">// 如果模板引擎是 velocity</span><br>        <span class="hljs-comment">// String templatePath = &quot;/templates/mapper.xml.vm&quot;;</span><br><br>        <span class="hljs-comment">// 自定义输出配置</span><br>        List&lt;FileOutConfig&gt; focList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-comment">// 自定义配置会被优先输出</span><br>        focList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutConfig</span>(templatePath) &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> String <span class="hljs-title function_">outputFile</span><span class="hljs-params">(TableInfo tableInfo)</span> &#123;<br>                <span class="hljs-comment">// 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！</span><br>                <span class="hljs-keyword">return</span> projectPath + <span class="hljs-string">&quot;/yeb-generator/src/main/resources/mapper/&quot;</span><br>                        + tableInfo.getEntityName() + <span class="hljs-string">&quot;Mapper&quot;</span><br>                        + StringPool.DOT_XML;<br>            &#125;<br>        &#125;);<br>        cfg.setFileOutConfigList(focList);<br>        mpg.setCfg(cfg);<br><br>        <span class="hljs-comment">// 配置模板</span><br>        <span class="hljs-type">TemplateConfig</span> <span class="hljs-variable">templateConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplateConfig</span>();<br>        templateConfig.setXml(<span class="hljs-literal">null</span>);<br>        mpg.setTemplate(templateConfig);<br><br>        <span class="hljs-comment">// 策略配置</span><br>        <span class="hljs-type">StrategyConfig</span> <span class="hljs-variable">strategy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StrategyConfig</span>();<br>        <span class="hljs-comment">//数据库表映射到实体的命名策略</span><br>        strategy.setNaming(NamingStrategy.underline_to_camel);<br>        <span class="hljs-comment">//数据库表字段映射到实体的命名策略</span><br>        strategy.setColumnNaming(NamingStrategy.no_change);<br>        <span class="hljs-comment">//lombok模型</span><br>        strategy.setEntityLombokModel(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//生成 @RestController 控制器</span><br>        strategy.setRestControllerStyle(<span class="hljs-literal">true</span>);<br>        strategy.setInclude(scanner(<span class="hljs-string">&quot;表名，多个英文逗号分割&quot;</span>).split(<span class="hljs-string">&quot;,&quot;</span>));<br>        strategy.setControllerMappingHyphenStyle(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//表前缀</span><br>        strategy.setTablePrefix(<span class="hljs-string">&quot;t_&quot;</span>);<br>        mpg.setStrategy(strategy);<br>        mpg.setTemplateEngine(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FreemarkerTemplateEngine</span>());<br>        mpg.execute();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>mysql8.0安装</title>
    <link href="/2022/11/23/mysql8-0%E5%AE%89%E8%A3%85/"/>
    <url>/2022/11/23/mysql8-0%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p>下载Mysql8.0</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo apt-get install mysql-server    <span class="hljs-regexp">//</span>服务端<br>service mysql status                 <span class="hljs-regexp">//</span>查看mysql运行状态<br></code></pre></td></tr></table></figure><p>跳过密码验证进入mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/mysql/mysql.conf.d/mysqld.cnf<br>在配置文件最后面添加这一行配置，禁用登录校验<br>skip-grant-tables<br>因为默认3306端口只允许本地访问的，注释掉这行 #bind-address = 127.0.0.1<br></code></pre></td></tr></table></figure><p>重启mysql</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#启动</span><br>sudo<span class="hljs-built_in"> service </span>mysql start<br><span class="hljs-comment">#停止</span><br>sudo<span class="hljs-built_in"> service </span>mysql stop<br><span class="hljs-comment">#重启</span><br>sudo<span class="hljs-built_in"> service </span>mysql restart<br></code></pre></td></tr></table></figure><p>登录mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">mysql -u root -p<br>提示密码直接回车<br><br>刷新<br>flush privileges;<br>清空authentication_string字段<br>update user set authentication_string=&#x27;&#x27; where user=&#x27;root&#x27;;<br>修改密码<br>ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;你的密码&#x27;;<br></code></pre></td></tr></table></figure><p>关闭跳过密码，去掉skip-grant-tables</p><p>打开远程登录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># mysql服务器出于安全考虑，默认只允许本地登录数据库服务器。<br># 更改 “mysql” 数据库里的 “user” 表里的 “host” 项，从”localhost”改称”%”，然后重启mysql这样就允许所有的远程机器进行访问了。<br>update user set host = &#x27;%&#x27; where user =&#x27;root&#x27;;<br><br># 查看修改后的结果<br>select host, user from user;<br><br>flush privileges;<br><br># 授予root用户全部权限<br>GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27;WITH GRANT OPTION;<br></code></pre></td></tr></table></figure><p>设置mysql开机自启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">sudo update-rc.d -f mysql defaults<br><br><br># 取消开机启动<br>sudo update-rc.d -f mysql remove<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>矩阵相乘(不用自带的函数)</title>
    <link href="/2022/10/14/%E7%9F%A9%E9%98%B5%E7%9B%B8%E4%B9%98-%E4%B8%8D%E7%94%A8%E8%87%AA%E5%B8%A6%E7%9A%84%E5%87%BD%E6%95%B0/"/>
    <url>/2022/10/14/%E7%9F%A9%E9%98%B5%E7%9B%B8%E4%B9%98-%E4%B8%8D%E7%94%A8%E8%87%AA%E5%B8%A6%E7%9A%84%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs matlab">clc;clear;  <span class="hljs-comment">%清空缓存</span><br><br>p=[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>; <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]; <span class="hljs-comment">%矩阵p</span><br>q=[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>; <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>; <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>; <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>];  <span class="hljs-comment">%矩阵q</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>=<span class="hljs-title">my_mat_mult</span><span class="hljs-params">(p,q)</span> %定义函数<span class="hljs-title">my_mat_mult</span></span><br><br>    p_data=<span class="hljs-built_in">size</span>(p);  <span class="hljs-comment">%获取矩阵行列，得到的是，例如p是2*4矩阵，那么p_data=[2,4]</span><br>    q_data=<span class="hljs-built_in">size</span>(q);<br><br>    <br>    <span class="hljs-keyword">if</span> p_data(<span class="hljs-number">2</span>)==q_data(<span class="hljs-number">1</span>)  <span class="hljs-comment">%首先先判断两个矩阵是否能够相乘，如果不能，就不用计算了</span><br>    <br>    <span class="hljs-comment">%矩阵能够相乘的情况：p[2*4]  q[4*3]   所以会生成 2*3 的矩阵m</span><br>        m=<span class="hljs-built_in">zeros</span>(p_data(<span class="hljs-number">1</span>),q_data(<span class="hljs-number">2</span>));  <span class="hljs-comment">%获取到p矩阵的行数，q矩阵的列数，创建一个全零的  行数*列数  的矩阵</span><br>    <br>    <span class="hljs-comment">%要取出p的每一行，取出q的每一列，所以要有两个循环，分别取出</span><br>        <span class="hljs-keyword">for</span> row=<span class="hljs-number">1</span>:p_data(<span class="hljs-number">1</span>)  <span class="hljs-comment">%对行进行循环</span><br>            data_p=p(row,:);  <span class="hljs-comment">%取得矩阵p的每一行</span><br>            <br>            <br>            <span class="hljs-keyword">for</span> col=<span class="hljs-number">1</span>:q_data(<span class="hljs-number">2</span>)  <span class="hljs-comment">%对列进行循环</span><br>                data_q=q(:,col);  <span class="hljs-comment">%取得矩阵q的每一列</span><br>                num=<span class="hljs-number">0</span>;  <span class="hljs-comment">%设置一个零时变量，用来存放相乘后相加的值，然后把这个值付给刚刚创建的m全零矩阵</span><br>                <br>                <span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:p_data(<span class="hljs-number">2</span>)  <span class="hljs-comment">%取出行和列的每个数，进行相乘相加，和数学上的矩阵相乘一样的道理</span><br>                    num=num+data_p(<span class="hljs-built_in">i</span>)*data_q(<span class="hljs-built_in">i</span>);<br>                <span class="hljs-keyword">end</span><br>                m(row,col)=num;  <span class="hljs-comment">%给m矩阵赋值</span><br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">disp</span>(<span class="hljs-string">&#x27;这里两个矩阵对不上，不能相乘&#x27;</span>);<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-built_in">disp</span>(m);  <span class="hljs-comment">%输出m矩阵</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>螺旋矩阵</title>
    <link href="/2022/10/13/%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/"/>
    <url>/2022/10/13/%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/</url>
    
    <content type="html"><![CDATA[<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs matlab">clc;<br>clear;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>=<span class="hljs-title">xpp</span><span class="hljs-params">(n)</span></span><br>    result=<span class="hljs-built_in">zeros</span>(n); <span class="hljs-comment">%生成一个n*n的全0矩阵</span><br>    row=<span class="hljs-number">1</span>; <span class="hljs-comment">%设置行</span><br>    col=<span class="hljs-number">1</span>; <span class="hljs-comment">%设置列</span><br>    edge=n;<br>    direction=<span class="hljs-string">&#x27;right&#x27;</span>;<br>    num=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> num&lt;=n*n  <span class="hljs-comment">%例如输入5， 1&lt;=25,条件成立</span><br>       result(row,col)=num; <span class="hljs-comment">%矩阵result（1，1）的值为 1</span><br>       <span class="hljs-keyword">switch</span> direction     <span class="hljs-comment">%direction=1，所以首先走case1，这个需要想明白，相当于if语句，判断direction的值是多少就走case n</span><br>           <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;right&#x27;</span><br>               col=col+<span class="hljs-number">1</span>;  <span class="hljs-comment">%每走一次case 1 col的值就+1</span><br>               <span class="hljs-keyword">if</span> col==edge  <span class="hljs-comment">%edge=n，edge的值是n，输入了5，就是5</span><br>                   direction=<span class="hljs-string">&#x27;down&#x27;</span>; <span class="hljs-comment">%  direction 的值改成2，本次循环结束，下一次进入switch就走case down</span><br>               <span class="hljs-keyword">end</span><br>           <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;down&#x27;</span>           <br>                   row=row+<span class="hljs-number">1</span>;<br>               <span class="hljs-keyword">if</span> row==edge<br>                   direction=<span class="hljs-string">&#x27;left&#x27;</span>;<br>               <span class="hljs-keyword">end</span><br>           <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;left&#x27;</span>         <br>                   col=col<span class="hljs-number">-1</span>;<br>               <span class="hljs-keyword">if</span> col==n-edge+<span class="hljs-number">1</span><br>                   direction=<span class="hljs-string">&#x27;up&#x27;</span> ;<br>               <span class="hljs-keyword">end</span><br>           <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;up&#x27;</span>           <br>                   row=row<span class="hljs-number">-1</span>;<br>               <span class="hljs-keyword">if</span> row==n-edge+<span class="hljs-number">1</span><br>                   direction=<span class="hljs-string">&#x27;right&#x27;</span>;<br>                   row=row+<span class="hljs-number">1</span>;<br>                   col=col+<span class="hljs-number">1</span>;<br>                   edge=edge<span class="hljs-number">-1</span>;<br>               <span class="hljs-keyword">end</span>       <br>       <span class="hljs-keyword">end</span><br>       num=num+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-built_in">disp</span>(result);<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot整合Security</title>
    <link href="/2022/08/25/SpringBoot%E6%95%B4%E5%90%88Security/"/>
    <url>/2022/08/25/SpringBoot%E6%95%B4%E5%90%88Security/</url>
    
    <content type="html"><![CDATA[<h3 id="SpringBoot整合Spring-Security"><a href="#SpringBoot整合Spring-Security" class="headerlink" title="SpringBoot整合Spring Security"></a>SpringBoot整合Spring Security</h3><h4 id="1-SpringSecurty简介"><a href="#1-SpringSecurty简介" class="headerlink" title="1.SpringSecurty简介"></a>1.SpringSecurty简介</h4><p>​1.Spring Security是Spring家族中的一个安全管理框架</p><p>​2.一般来说web应用的需要进行认证和授权</p><p>​认证：验证当前访问系统的是不是本系统的用户，并且要确认具体是哪个用户</p><p>​授权：经过认证后判断当前的用户是否有权限进行某个操作</p><p>​3.认证和授权也是SpringSecurity作为安全框架的核心功能。</p><h4 id="2-快速入门"><a href="#2-快速入门" class="headerlink" title="2.快速入门"></a>2.快速入门</h4><h4 id="2-1准备工作"><a href="#2-1准备工作" class="headerlink" title="2.1准备工作"></a>2.1准备工作</h4><h5 id="2-1准备一个springboot工程"><a href="#2-1准备一个springboot工程" class="headerlink" title="2.1准备一个springboot工程"></a>2.1准备一个springboot工程</h5><p>1.设置父工程的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml">    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!--        启动器--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--        lombok插件--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.新增controller测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WxUserController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">Hello</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>3.使用谷歌浏览器访问路径测试</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">http://localhost:8888/hello<br></code></pre></td></tr></table></figure><h5 id="2-2引入Spring-Security"><a href="#2-2引入Spring-Security" class="headerlink" title="2.2引入Spring Security"></a>2.2引入Spring Security</h5><p>1.引入依赖即可实现入门案例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--        集成spring security--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>引入依赖之后我们尝试访问之前的接口会发现自动跳转到一个springsecurity的默认登录界面，默认用户名是user，密码会在控制台上输出。也就是必须要登录之后才能对接口进行访问。</p><h4 id="3-认证"><a href="#3-认证" class="headerlink" title="3.认证"></a>3.认证</h4><h5 id="3-1登录校验流程"><a href="#3-1登录校验流程" class="headerlink" title="3.1登录校验流程"></a>3.1登录校验流程</h5><h5 id="3-2SpringSecurity完整流程"><a href="#3-2SpringSecurity完整流程" class="headerlink" title="3.2SpringSecurity完整流程"></a>3.2SpringSecurity完整流程</h5><p>SpringSecurity的原理其实就是一个过滤器，内部包含了提供各种功能的过滤器，这里我们可以看看入门案例中的过滤器。</p><p>图中只是显示了核心过滤器，其他的非核心过滤器并没有在图中显示。</p><p><strong>UsernamePasswordAuthenticationFilter</strong>：负责处理我们在登录页面填写了用户名密码后的登录请求。入门案例找那个的认证工作主要有它负责。</p><p><strong>ExceptionTranslationFilter</strong>:处理过滤器链中抛出的任何AccessDeniedException和AuthenticationException.</p><p><strong>FilterSecurityInterceptor</strong>:负责权限校验的过滤器。</p><p>通过debug发现SpringSecurity的过滤器有这么多</p><h5 id="3-3-SpringSecurity认证流程图详解"><a href="#3-3-SpringSecurity认证流程图详解" class="headerlink" title="3.3 SpringSecurity认证流程图详解"></a>3.3 SpringSecurity认证流程图详解</h5><p>概念速查：</p><p>Authentication接口：它的实现类，表示当前访问系统的用户，封装了用户相关信息</p><p>AuthenticationManager接口：定义了认证Authentication的方法</p><p>UserDetailService接口：加载用户特定数据的核心接口。里面规定了根据一个用户名查询用户信息的方法。</p><p>UserDetails接口：提供核心用户信息。通过UserDetailsService 根据用户信息要封装成UserDetails对象返回。然后将这些信息封装到Authentication对象中。</p><p>具体登录流程</p><p>具体的检验流程</p><p>登录成功后就将用户id作为key 用户信息作为value存在redis中，然后在每次请求携带token时拿到用户id之后就去redis中取出用户信息，判断是否登录过了。</p><h5 id="3-4-解决问题"><a href="#3-4-解决问题" class="headerlink" title="3.4 解决问题"></a>3.4 解决问题</h5><h6 id="3-4-1思路分析"><a href="#3-4-1思路分析" class="headerlink" title="3.4.1思路分析"></a>3.4.1思路分析</h6><p>登录</p><p>​1.自定义登录接口</p><p>​调用ProviderManager的方法进行认证 如果认证成功生成jwt 把用户信息存入到redis中</p><p>​2.自定义UserDetailsService</p><p>​在这个实现类中去查询数据库</p><p>校验：</p><p>​1.定义一个jwt认证过滤器</p><p>​获取token</p><p>​解析token，获取其中的userid</p><p>​从redis中获取用户信息</p><p>​存到SecurityContextHolder中</p><h5 id="3-5-准备工作"><a href="#3-5-准备工作" class="headerlink" title="3.5.准备工作"></a>3.5.准备工作</h5><p>​1.整合redis、jwt、mybatis-plus、MySQL</p><p>​2.测试可以使用mapper接口查询用户信息</p><p>​3.用户表字段为 id、 user_name、password、 nick_name等</p><h5 id="3-6实现UserDetailsService"><a href="#3-6实现UserDetailsService" class="headerlink" title="3.6实现UserDetailsService"></a>3.6实现UserDetailsService</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.mybatisplusdemo.service.impl;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;<br><span class="hljs-keyword">import</span> com.example.mybatisplusdemo.entity.LoginUser;<br><span class="hljs-keyword">import</span> com.example.mybatisplusdemo.entity.User;<br><br><span class="hljs-keyword">import</span> com.example.mybatisplusdemo.mapper.UserMapper;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.Objects;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> chenzj9</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 重写security过滤器链中的UserDetailsService实现从数据库中查询用户信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022年01月13日 16:39</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span> <span class="hljs-comment">//注意一定要注入到spring容器中</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDetailsServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetailsService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> UserDetails <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException &#123;<br>    <span class="hljs-comment">//从数据库查询用户信息 这里我根据openID查询</span><br>        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;&gt;();<br>        queryWrapper.eq(User::getUserName,username);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectOne(queryWrapper);<br><span class="hljs-comment">//        如果查询到的用户信息为空，就抛出异常</span><br>        <span class="hljs-keyword">if</span>(Objects.isNull(user))&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;用户openID错误或者是用户不存在&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//TODO 查询用户的权限信息</span><br><br><span class="hljs-comment">//        把数据封装成UserDetails</span><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginUser</span>(user);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>另外UserDetailsService返回的对象为UserDetails，所以要重新写一个对象封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.mybatisplusdemo.entity;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><span class="hljs-keyword">import</span> org.springframework.security.core.GrantedAuthority;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><br><span class="hljs-keyword">import</span> java.util.Collection;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> chenzj9</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 重写一个用户实例对象用户security认证</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022年01月13日 16:52</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginUser</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetails</span> &#123;<br><span class="hljs-comment">//    定义一个自己的user对象</span><br>    <span class="hljs-keyword">private</span> User user;<br><span class="hljs-comment">//    返回权限</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Collection&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> user.getPassword();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> user.getUserName();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonExpired</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonLocked</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br><span class="hljs-comment">//    是否过期</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isCredentialsNonExpired</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEnabled</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>接下来就可以重启项目访问之前的接口了，使用的是数据库中存在的用户表中的用户登录，然后会有一个密码存储的问题，接下来会讲到</p><h5 id="3-6密码加密存储"><a href="#3-6密码加密存储" class="headerlink" title="3.6密码加密存储"></a>3.6密码加密存储</h5><p>1.重写Security密码加密方式</p><p>加一个配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.mybatisplusdemo.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> chenzj9</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> security配置类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022年01月13日 17:44</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringSecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><span class="hljs-comment">//    BCryptPasswordEncoder创建默认的密码加密方式并注入容器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> PasswordEncoder <span class="hljs-title function_">passwordEncoder</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>2.注意这时候数据库存储的密码就是加密后的秘文了，不然登录会失败。</p><h5 id="3-7自定义登录接口"><a href="#3-7自定义登录接口" class="headerlink" title="3.7自定义登录接口"></a>3.7自定义登录接口</h5><p>1.自定义登录接口，然后让SpringSecurity对这个接口放行，就是不用登录认证也可以访问、</p><p>2.在接口中我们通过AuthenticationManager的authenticate方法进行用户认证，所以需要在securityConfig中把AuthenticationManager注入容器中。</p><p>3.认证成功的话返回一个jwt，放入到响应体中，并让用户下回请求时能通过jwt识别出具体的是哪个用户，我们需要把用户信息存入redis中，可以把用户id作为key</p><p>（1）定义一个接口类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> LoginService loginService;<br>    <span class="hljs-meta">@PostMapping(&quot;/login&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span>&#123;<br>    <span class="hljs-comment">//登录</span><br><br>        <span class="hljs-keyword">return</span> loginService.login(user);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>(2)定义一个登录服务类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">LoginService</span> &#123;<br>    Result <span class="hljs-title function_">login</span><span class="hljs-params">(User user)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">LoginService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AuthenticationManager authenticationManager;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisUtil redisUtil;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">login</span><span class="hljs-params">(User user)</span> &#123;<br>        <span class="hljs-comment">//AuthenticationManager authentication方法认证  需要去security配置类里配置</span><br>        <span class="hljs-comment">//将用户名和用户密码封装成authenticationToken对象</span><br>        <span class="hljs-type">UsernamePasswordAuthenticationToken</span> <span class="hljs-variable">authenticationToken</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordAuthenticationToken</span>(user.getUserName(), user.getPassword());<br>        <span class="hljs-type">Authentication</span> <span class="hljs-variable">authenticate</span> <span class="hljs-operator">=</span> authenticationManager.authenticate(authenticationToken);<br>        <span class="hljs-comment">//如果没认证通过返回提示</span><br>        <span class="hljs-keyword">if</span> (Objects.isNull(authenticate)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;认证失败&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//认证成功了使用userID返回一个jwt</span><br>        <span class="hljs-type">LoginUser</span> <span class="hljs-variable">loginUser</span> <span class="hljs-operator">=</span> (LoginUser) authenticate.getPrincipal();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">userid</span> <span class="hljs-operator">=</span> loginUser.getUser().getId().toString();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">jwt</span> <span class="hljs-operator">=</span> JwtUtils.getToken(userid);<br>        <span class="hljs-comment">//将完整的用户信息存入到redis中</span><br><br>        redisUtil.set(<span class="hljs-string">&quot;login:&quot;</span>+userid,loginUser);<br><br>        <span class="hljs-keyword">return</span> Result.success(<span class="hljs-string">&quot;登录成功&quot;</span>, <span class="hljs-string">&quot;token&quot;</span>, jwt);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>(3)添加springSecurity配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringSecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br>    <span class="hljs-comment">//    BCryptPasswordEncoder创建默认的密码加密方式并注入容器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> PasswordEncoder <span class="hljs-title function_">passwordEncoder</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();<br>    &#125;<br><br>    <span class="hljs-comment">//    重写方法实现放行请求</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http<br>            .csrf().disable() <span class="hljs-comment">//关闭csrf</span><br>            <span class="hljs-comment">//                关闭session会话机制</span><br>            .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)<br>            .and()<br>            .authorizeRequests()<br>            <span class="hljs-comment">//对于登录接口 允许匿名访问</span><br>            .antMatchers(<span class="hljs-string">&quot;/user/login&quot;</span>).anonymous()<br>            <span class="hljs-comment">//除了上面的都要进行鉴权认证</span><br>            .anyRequest().authenticated();<br>        <span class="hljs-comment">//        super.configure(http);</span><br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> AuthenticationManager <span class="hljs-title function_">authenticationManagerBean</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.authenticationManagerBean();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-8认证过滤器"><a href="#3-8认证过滤器" class="headerlink" title="3.8认证过滤器"></a>3.8认证过滤器</h5><p>1.我们需要自定义一个过滤器，这个过滤器会去获取请求头中的token，对token进行解析取出其中的userID</p><p>2.使用userID去redis中获取对应的loginUser对象</p><p>3.然后封装成Authentication对象存入到SecurityContextHolder中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.mybatisplusdemo.filter;<br><br><span class="hljs-keyword">import</span> com.example.mybatisplusdemo.entity.LoginUser;<br><span class="hljs-keyword">import</span> com.example.mybatisplusdemo.utils.JwtUtils;<br><span class="hljs-keyword">import</span> com.example.mybatisplusdemo.utils.RedisUtil;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;<br><span class="hljs-keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.web.filter.OncePerRequestFilter;<br><br><span class="hljs-keyword">import</span> javax.servlet.FilterChain;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> chenzj9</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 定义jwt认证过滤器</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022年01月14日 14:49</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtAuthenticationTokenFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">OncePerRequestFilter</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisUtil redisUtil;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilterInternal</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//       获取token</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;token&quot;</span>);<br>        <span class="hljs-keyword">if</span>(!StringUtils.hasText(token))&#123;<br>            <span class="hljs-comment">//            为空时放行 因为后面还有别的过滤器</span><br>            filterChain.doFilter(request,response);<br>            <span class="hljs-keyword">return</span>; <span class="hljs-comment">//下面就不执行解析等操作了</span><br>        &#125;<br>        <span class="hljs-comment">//        解析token</span><br>        String userid;<br>        <span class="hljs-keyword">try</span> &#123;<br>            userid = (String) JwtUtils.parseToken(token);<br>        &#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;token非法！&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//        从redis中获取到用户信息</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> redisUtil.get(<span class="hljs-string">&quot;login:&quot;</span> + userid);<br>        <span class="hljs-type">LoginUser</span> <span class="hljs-variable">loginUser</span> <span class="hljs-operator">=</span> (LoginUser) o;<br>        <span class="hljs-keyword">if</span>(Objects.isNull(loginUser))&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;用户未登录！&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//        存入到SecurityContextHolder中，因为后面的过滤器都是从这里获取到认证的用户</span><br>        <span class="hljs-comment">//TODO 将用户权限信息存入到Authentication中</span><br>        <span class="hljs-type">UsernamePasswordAuthenticationToken</span> <span class="hljs-variable">authenticationToken</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordAuthenticationToken</span>(loginUser,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>);<br>        SecurityContextHolder.getContext().setAuthentication(authenticationToken);<br>        <span class="hljs-comment">//        放行</span><br>        filterChain.doFilter(request,response);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.在security配置类中添加配置(其他同上) 因为jwt过滤器必须在UsernamePasswordAuthenticationFilter过滤器前</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;<br><span class="hljs-comment">//    重写方法实现放行请求</span><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    http<br>        .csrf().disable() <span class="hljs-comment">//关闭csrf</span><br>        <span class="hljs-comment">//                关闭session会话机制</span><br>        .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)<br>        .and()<br>        .authorizeRequests()<br>        <span class="hljs-comment">//对于登录接口 允许匿名访问</span><br>        .antMatchers(<span class="hljs-string">&quot;/user/login&quot;</span>).anonymous()<br>        <span class="hljs-comment">//除了上面的都要进行鉴权认证</span><br>        .anyRequest().authenticated();<br>    <span class="hljs-comment">//        super.configure(http);</span><br>    http<br>        <span class="hljs-comment">//                在UsernamePasswordAuthenticationFilter之前添加过滤器</span><br>        .addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-9退出登录"><a href="#3-9退出登录" class="headerlink" title="3.9退出登录"></a>3.9退出登录</h5><p>​我们只需要在loginController中定义一个退出登录接口，然后获取SecurityContextHolder中的认证信息，删除redis中的token数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/logout&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">logout</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> loginService.logout();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//在loginService中定义logout方法</span><br>Result <span class="hljs-title function_">logout</span><span class="hljs-params">()</span>;<br><span class="hljs-comment">//在loginServiceImpl中实现逻辑</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">logout</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//获取SecurityContextHolder中的用户id</span><br>    <span class="hljs-type">UsernamePasswordAuthenticationToken</span> <span class="hljs-variable">authenticationToken</span> <span class="hljs-operator">=</span> (UsernamePasswordAuthenticationToken) SecurityContextHolder.getContext().getAuthentication();<br>    <span class="hljs-type">LoginUser</span> <span class="hljs-variable">loginUser</span> <span class="hljs-operator">=</span> (LoginUser) authenticationToken.getPrincipal();<br>    <span class="hljs-comment">//删除redis中的数据</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userid</span> <span class="hljs-operator">=</span> loginUser.getUser().getId();<br>    redisUtil.delete(<span class="hljs-string">&quot;login:&quot;</span>+userid.toString());<br>    <span class="hljs-keyword">return</span> Result.success(<span class="hljs-string">&quot;退出登录成功！&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>然后就先登录在访问hello接口测试，然后在访问logout接口，最后访问hello接口发现已经未登录（注意：除了登录接口其他接口访问都要携带token）</p><h4 id="4-授权"><a href="#4-授权" class="headerlink" title="4.授权"></a>4.授权</h4><h5 id="4-0权限系统的作用"><a href="#4-0权限系统的作用" class="headerlink" title="4.0权限系统的作用"></a>4.0权限系统的作用</h5><p> 例如一个学校图书管理系统，如果是普通学生就能看到借书和还书相关功能，不可能让他看到并且去使用添加书籍信息，删除数据信息相关功能。但是如果是一个图书管理员的账号登录了，应该就能看到并使用添加书籍信息，删除书籍信息等相关功能。</p><p>​总结起来就是不同的用户可以使用不同的功能，这就是权限系统要去实现的效果。</p><p>​我们不能只依赖前端去判断用户的权限来选择显示那些菜单那些按钮。因为如果只这样，如果有人知道了对应功能的接口地址就可以不通过前端，直接去发送请求来实现相关功能操作。</p><p>​所以我们还要在后台进行用户权限的判断，判断当前用户是否有相应的权限，必须基于所需权限才能进行相应的操作。</p><h5 id="4-1授权基本流程"><a href="#4-1授权基本流程" class="headerlink" title="4.1授权基本流程"></a>4.1授权基本流程</h5><p>​在springSecurity中，会使用默认的filterSecurityInterceptor来进行权限校验。在filterSecurityInterceptor中会从SecurityContextHolder获取其中的Authentication。然后获取其中的权限信息。当前用户是否拥有访问当前资源所需的权限。</p><p>​所以我们在项目中只需要把当前登录用户的权限信息也存入到Authentication.</p><p>​然后设置我们的资源所需的权限就行。</p><h5 id="4-2授权实现"><a href="#4-2授权实现" class="headerlink" title="4.2授权实现"></a>4.2授权实现</h5><h6 id="4-2-1限制访问资源所需权限"><a href="#4-2-1限制访问资源所需权限" class="headerlink" title="4.2.1限制访问资源所需权限"></a>4.2.1限制访问资源所需权限</h6><p>​在SpringSecurity为我们提供了基于注解的权限控制方案，这也是我们项目中主要采用的方式。我们可以使用注解去指定访问对应职院的所需权限。</p><p>​但是要使用它我们需要开启相关配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//在配置类SpringSecurityConfig类上加上这个注解</span><br><span class="hljs-meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span> <span class="hljs-comment">//开启是用prePostEnabled的注解</span><br></code></pre></td></tr></table></figure><p>​然后就可以使用对应的注解。@PreAuthorize</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br><span class="hljs-meta">@PreAuthorize(&quot;hasAuthority(&#x27;test&#x27;)&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">Hello</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="4-2-2封装权限信息"><a href="#4-2-2封装权限信息" class="headerlink" title="4.2.2封装权限信息"></a>4.2.2封装权限信息</h6><p>​我们前面在写UserDetailsServiceimpl的时候说过，在查询出用户后还需要获取对应的权限信息，封装到UserDetails中返回。</p><p>我们之前定义了UserDetails的实现类LoginUser。想要让其能封装权限信息就要对其进行修改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.mybatisplusdemo.entity;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.annotation.JSONField;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.JsonIgnoreProperties;<br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.extern.java.Log;<br><span class="hljs-keyword">import</span> org.springframework.security.core.GrantedAuthority;<br><span class="hljs-keyword">import</span> org.springframework.security.core.authority.SimpleGrantedAuthority;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> chenzj9</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 重写一个用户实例对象用户security认证</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022年01月13日 16:52</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginUser</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetails</span> &#123;<br><span class="hljs-comment">//    定义一个自己的user对象</span><br><br>    <span class="hljs-keyword">private</span> User user;<br>    <span class="hljs-comment">//权限信息</span><br>    <span class="hljs-keyword">private</span> List&lt;String&gt; permission;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LoginUser</span><span class="hljs-params">(User user, List&lt;String&gt; permission)</span> &#123;<br>        <span class="hljs-built_in">this</span>.user = user;<br>        <span class="hljs-built_in">this</span>.permission = permission;<br>    &#125;<br>    <span class="hljs-comment">//权限信息列表 不需要序列化</span><br>    <span class="hljs-meta">@JSONField(serialize = false)</span><br>    <span class="hljs-keyword">private</span> List&lt;SimpleGrantedAuthority&gt; authorityList;<br>    <span class="hljs-comment">//    返回权限</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Collection&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;<br>        <span class="hljs-comment">//把permission中的string类型的权限信息封装成SimpleGrantedAuthority对象</span><br>        <span class="hljs-comment">//判断权限信息是否已存在，存在直接返回</span><br>        <span class="hljs-keyword">if</span>(authorityList!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> authorityList;<br>        &#125;<br><span class="hljs-comment">//         authorityList = new ArrayList&lt;&gt;();</span><br><span class="hljs-comment">//        for (String role : permission) &#123;</span><br><span class="hljs-comment">//            SimpleGrantedAuthority simpleGrantedAuthority = new SimpleGrantedAuthority(role);</span><br><span class="hljs-comment">//            authorityList.add(simpleGrantedAuthority);</span><br><span class="hljs-comment">//        &#125;</span><br>        <span class="hljs-comment">//或者使用流对象处理</span><br>         authorityList = permission.stream().map(SimpleGrantedAuthority::<span class="hljs-keyword">new</span>).collect(Collectors.toList());<br>        <span class="hljs-keyword">return</span> authorityList;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> user.getPassword();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> user.getUserName();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonExpired</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonLocked</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br><span class="hljs-comment">//    是否过期</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isCredentialsNonExpired</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEnabled</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>接下来就是修改jwt过滤器了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.mybatisplusdemo.filter;<br><br><span class="hljs-keyword">import</span> com.example.mybatisplusdemo.entity.LoginUser;<br><span class="hljs-keyword">import</span> com.example.mybatisplusdemo.utils.JwtUtils;<br><span class="hljs-keyword">import</span> com.example.mybatisplusdemo.utils.RedisCache;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;<br><span class="hljs-keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.web.filter.OncePerRequestFilter;<br><br><span class="hljs-keyword">import</span> javax.servlet.FilterChain;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> chenzj9</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 定义jwt认证过滤器</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022年01月14日 14:49</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtAuthenticationTokenFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">OncePerRequestFilter</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisCache redisCache;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilterInternal</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><span class="hljs-comment">//       获取token</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;token&quot;</span>);<br>        <span class="hljs-keyword">if</span> (!StringUtils.hasText(token)) &#123;<br><span class="hljs-comment">//            为空时放行 因为后面还有别的过滤器</span><br>            filterChain.doFilter(request, response);<br>            <span class="hljs-keyword">return</span>; <span class="hljs-comment">//下面就不执行解析等操作了</span><br>        &#125;<br><span class="hljs-comment">//        解析token</span><br>        String userid;<br>        <span class="hljs-keyword">try</span> &#123;<br>            userid = (String) JwtUtils.parseToken(token);<br>        &#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;token非法！&quot;</span>);<br>        &#125;<br><span class="hljs-comment">//        从redis中获取到用户信息</span><br><span class="hljs-comment">//        Object o = redisUtil.get(&quot;login:&quot; + userid);</span><br>        <span class="hljs-type">LoginUser</span> <span class="hljs-variable">loginUser</span> <span class="hljs-operator">=</span> redisCache.getCacheObject(<span class="hljs-string">&quot;login:&quot;</span> + userid);<br><span class="hljs-comment">//        LoginUser loginUser = (LoginUser) o;</span><br>        <span class="hljs-keyword">if</span> (Objects.isNull(loginUser)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;用户未登录！&quot;</span>);<br>        &#125;<br><span class="hljs-comment">//        存入到SecurityContextHolder中，因为后面的过滤器都是从这里获取到认证的用户</span><br>        <span class="hljs-comment">//TODO 将用户权限信息存入到Authentication中</span><br>        <span class="hljs-type">UsernamePasswordAuthenticationToken</span> <span class="hljs-variable">authenticationToken</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordAuthenticationToken</span>(loginUser, <span class="hljs-literal">null</span>, loginUser.getAuthorities());<br>        SecurityContextHolder.getContext().setAuthentication(authenticationToken);<br><span class="hljs-comment">//        放行</span><br>        filterChain.doFilter(request, response);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后进行测试</p><h6 id="4-2-3从数据库中查询权限信息"><a href="#4-2-3从数据库中查询权限信息" class="headerlink" title="4.2.3从数据库中查询权限信息"></a>4.2.3从数据库中查询权限信息</h6><h6 id="4-2-3-1-RBAC模型"><a href="#4-2-3-1-RBAC模型" class="headerlink" title="4.2.3.1 RBAC模型"></a>4.2.3.1 RBAC模型</h6><p>​RBAC权限模型（Role-Based Access Control）即基于角色的权限控制。这是目前最常被开发者使用也是相对易用、通用权限模型。</p><p>图解</p><h6 id="4-2-3-2准备工作"><a href="#4-2-3-2准备工作" class="headerlink" title="4.2.3.2准备工作"></a>4.2.3.2准备工作</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> database mybatisdemo;<br><span class="hljs-keyword">create</span> database <span class="hljs-comment">/*! if not exists*/</span> `mybatisdemo` <span class="hljs-comment">/*! default character set utf8mb4*/</span>;<br><br>use `mybatisdemo`;<br><span class="hljs-comment">-- 菜单表</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `sys_menu`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `sys_menu`(<br>`id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment,<br>    `menu_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;null&#x27;</span> comment <span class="hljs-string">&#x27;菜单名&#x27;</span>,<br>    `path` <span class="hljs-type">varchar</span>(<span class="hljs-number">200</span>) <span class="hljs-keyword">default</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;路由地址&#x27;</span>,<br>    `component` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">default</span> <span class="hljs-keyword">null</span> comment<span class="hljs-string">&#x27;组件名称&#x27;</span>,<br>    `visible` <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;0&#x27;</span> comment <span class="hljs-string">&#x27;菜单状态（0 显示，1 隐藏）&#x27;</span>,<br>    `status` <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;0&#x27;</span> comment <span class="hljs-string">&#x27;菜单状态（0 正常 1 停用）&#x27;</span>,<br>    `perms` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">default</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;权限标识&#x27;</span>,<br>    `icon` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;#&#x27;</span> comment<span class="hljs-string">&#x27;菜单图标&#x27;</span>,<br>    `create_by` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">default</span> <span class="hljs-keyword">null</span>,<br>    `create_time` datetime <span class="hljs-keyword">default</span> <span class="hljs-keyword">null</span>,<br>    `update_by` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">default</span> <span class="hljs-keyword">null</span>,<br>    `update_time` datetime <span class="hljs-keyword">default</span> <span class="hljs-keyword">null</span>,<br>    `del_flag` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;0&#x27;</span> comment <span class="hljs-string">&#x27;是否删除（0 未删除 1 已删除）&#x27;</span>,<br>    `remark` <span class="hljs-type">varchar</span> (<span class="hljs-number">500</span>) <span class="hljs-keyword">default</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;备注&#x27;</span>,<br>    <span class="hljs-keyword">primary</span> key(`id`)<br>    )engine<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">default</span> CHARSET <span class="hljs-operator">=</span> utf8mb4 comment <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;菜单表&#x27;</span>;<br><span class="hljs-comment">-- 规则表</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `sys_role`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `sys_role`(<br>`id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment,<br>    `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">default</span> <span class="hljs-keyword">null</span>,<br>    `role_key` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">default</span> <span class="hljs-keyword">null</span> comment<span class="hljs-string">&#x27;角色权限字符串&#x27;</span>,<br>    `status` <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;0&#x27;</span> comment <span class="hljs-string">&#x27;角色状态（0 正常 1 停用）&#x27;</span>,<br>    `del_flag` <span class="hljs-type">int</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">default</span> <span class="hljs-number">0</span> comment <span class="hljs-string">&#x27;删除标识&#x27;</span>,<br>    `create_by` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">default</span> <span class="hljs-keyword">null</span>,<br>    `create_time` datetime <span class="hljs-keyword">default</span> <span class="hljs-keyword">null</span>,<br>    `update_by` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">default</span> <span class="hljs-keyword">null</span>,<br>    `update_time` datetime <span class="hljs-keyword">default</span> <span class="hljs-keyword">null</span>,<br>    `remark` <span class="hljs-type">varchar</span>(<span class="hljs-number">500</span>) <span class="hljs-keyword">default</span> <span class="hljs-keyword">null</span> comment<span class="hljs-string">&#x27;备注&#x27;</span>,<br><span class="hljs-keyword">primary</span> key(`id`)<br>)engine<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">default</span> CHARSET <span class="hljs-operator">=</span> utf8mb4 comment <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;角色表&#x27;</span>;<br><span class="hljs-comment">-- 角色菜单表</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `sys_role_menu`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `sys_role_menu`(<br>`role_id` <span class="hljs-type">bigint</span>(<span class="hljs-number">200</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment comment<span class="hljs-string">&#x27;角色id&#x27;</span>,<br>`menu_id` <span class="hljs-type">bigint</span>(<span class="hljs-number">200</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">default</span> <span class="hljs-number">0</span> comment<span class="hljs-string">&#x27;菜单id&#x27;</span>,<br><span class="hljs-keyword">primary</span> key(`role_id`,`menu_id`)<br>)engine<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">default</span> CHARSET <span class="hljs-operator">=</span> utf8mb4 comment <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;角色菜单映射表&#x27;</span>;<br><span class="hljs-comment">-- 用户表</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `sys_user`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `sys_user`(<br>`id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment comment<span class="hljs-string">&#x27;主键&#x27;</span>,<br>    `user_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;null&#x27;</span> comment<span class="hljs-string">&#x27;用户名&#x27;</span>,<br>    `nick_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;null&#x27;</span> comment<span class="hljs-string">&#x27;密码&#x27;</span>,<br>    `password` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;null&#x27;</span> comment<span class="hljs-string">&#x27;用户密码&#x27;</span>,<br>    `status` <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;0&#x27;</span> comment<span class="hljs-string">&#x27;账号状态（0 正常 1 ,停用）&#x27;</span>,<br>`email` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;null&#x27;</span> comment<span class="hljs-string">&#x27;邮箱&#x27;</span>,<br>    `phonenumber` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;null&#x27;</span> comment<span class="hljs-string">&#x27;手机号&#x27;</span>,<br>    `sex` <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">default</span> <span class="hljs-keyword">null</span> comment<span class="hljs-string">&#x27;用户性别（0 男 1 女 2 未知）&#x27;</span>,<br>    `avatar` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;null&#x27;</span> comment<span class="hljs-string">&#x27;头像&#x27;</span>,<br>    `user_type` <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;1&#x27;</span> comment<span class="hljs-string">&#x27;用户类型（0 管理员 1 普通用户）&#x27;</span>,<br>    `del_flag` <span class="hljs-type">int</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">default</span> <span class="hljs-number">0</span> comment <span class="hljs-string">&#x27;删除标识&#x27;</span>,<br>    `create_by` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">default</span> <span class="hljs-keyword">null</span>,<br>    `create_time` datetime <span class="hljs-keyword">default</span> <span class="hljs-keyword">null</span>,<br>    `update_by` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">default</span> <span class="hljs-keyword">null</span>,<br>    `update_time` datetime <span class="hljs-keyword">default</span> <span class="hljs-keyword">null</span>,<br>    <span class="hljs-keyword">primary</span> key(`id`)<br>)engine<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">default</span> CHARSET <span class="hljs-operator">=</span> utf8mb4 comment <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;用户表&#x27;</span>;<br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `sys_user_role`;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> `sys_user_role`(<br>`user_id` <span class="hljs-type">bigint</span>(<span class="hljs-number">200</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment comment<span class="hljs-string">&#x27;用户id&#x27;</span>,<br>    `role_id` <span class="hljs-type">bigint</span>(<span class="hljs-number">200</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;0&#x27;</span> comment<span class="hljs-string">&#x27;角色id&#x27;</span>,<br>    <span class="hljs-keyword">primary</span> key(`user_id`,`role_id`)<br>)engine<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">default</span> CHARSET <span class="hljs-operator">=</span> utf8mb4 comment <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;用户角色映射表&#x27;</span>;<br><br><br></code></pre></td></tr></table></figure><p>权限查询语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 根据用户id 查询perms 对应的role 和menu 都必须是正常状态的alter</span><br><span class="hljs-keyword">SELECT</span> <br>    <span class="hljs-keyword">distinct</span> m.`perms`<br><span class="hljs-keyword">FROM</span><br>    sys_user_role <span class="hljs-keyword">as</span> ur<br>    <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> `sys_role` r <span class="hljs-keyword">on</span> ur.`role_id` <span class="hljs-operator">=</span> r.`id`<br>    <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> `sys_role_menu` rm <span class="hljs-keyword">on</span> ur.`role_id` <span class="hljs-operator">=</span> rm.`role_id`<br>    <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> `sys_menu` m <span class="hljs-keyword">on</span> m.`id` <span class="hljs-operator">=</span> rm.`menu_id`<br><span class="hljs-keyword">WHERE</span><br>    user_id <span class="hljs-operator">=</span> <span class="hljs-number">2</span><br><span class="hljs-keyword">and</span> r.`status` <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">and</span> m.`status` <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>创建实体类User、Menu</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.mybatisplusdemo.entity;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.annotation.JSONField;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.JsonInclude;<br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> chenzj9</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022年01月13日 17:07</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@TableName(value = &quot;sys_user&quot;)</span><br><span class="hljs-meta">@JsonInclude(JsonInclude.Include.NON_NULL)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-meta">@TableId</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String userName;<br>    <span class="hljs-keyword">private</span> String nickName;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> String status;<br>    <span class="hljs-keyword">private</span> String email;<br>    <span class="hljs-keyword">private</span> String phonenumber;<br>    <span class="hljs-keyword">private</span> String sex;<br>    <span class="hljs-keyword">private</span> String avatar;<br>    <span class="hljs-keyword">private</span> String user_type;<br>    <span class="hljs-keyword">private</span> Integer delFlag;<br>    <span class="hljs-keyword">private</span> Long  createBy;<br>    <span class="hljs-keyword">private</span> Date createTime;<br>    <span class="hljs-keyword">private</span> Long updateBy;<br>    <span class="hljs-keyword">private</span> Date updateTime;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.mybatisplusdemo.entity;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.JsonInclude;<br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.experimental.Accessors;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> chenzj9</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022年01月20日 22:23</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@Accessors(chain = true)</span><span class="hljs-comment">//链式调用</span><br><span class="hljs-meta">@JsonInclude(JsonInclude.Include.NON_NULL)</span><br><span class="hljs-meta">@TableName(value = &quot;sys_menu&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Menu</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-meta">@TableId</span><br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-keyword">private</span> String menuName;<br>    <span class="hljs-comment">//组件路径</span><br>    <span class="hljs-keyword">private</span> String path;<br>    <span class="hljs-comment">//组件名称</span><br>    <span class="hljs-keyword">private</span> String component;<br>    <span class="hljs-comment">//菜单状态</span><br>    <span class="hljs-keyword">private</span> String visible;<br>    <span class="hljs-keyword">private</span> String status;<br>    <span class="hljs-keyword">private</span> String perms;<br>    <span class="hljs-keyword">private</span> String icon;<br>    <span class="hljs-comment">//创建者</span><br>    <span class="hljs-keyword">private</span> Long  createBy;<br>    <span class="hljs-keyword">private</span> Date createTime;<br>    <span class="hljs-keyword">private</span> Long updateBy;<br>    <span class="hljs-keyword">private</span> Date updateTime;<br>    <span class="hljs-comment">//是否删除</span><br>    <span class="hljs-keyword">private</span> Integer delFlag;<br>    <span class="hljs-keyword">private</span> String remark;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="4-2-3-3代码实现"><a href="#4-2-3-3代码实现" class="headerlink" title="4.2.3.3代码实现"></a>4.2.3.3代码实现</h6><p>我们只需要根据用户id去查询其所对应的权限信息即可。</p><p>所以我们可以先定义一个mapper，其中提供一个方法可以根据userid查询权限信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MenuMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;Menu&gt; &#123;<br><span class="hljs-comment">// 根据用户id 查询perms 对应的role 和menu 都必须是正常状态的alter</span><br>    List&lt;String&gt; <span class="hljs-title function_">selectPermsByUserId</span><span class="hljs-params">(Long userId)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后重新修改UserDetailsServiceImpl的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.mybatisplusdemo.service.impl;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;<br><span class="hljs-keyword">import</span> com.example.mybatisplusdemo.entity.LoginUser;<br><span class="hljs-keyword">import</span> com.example.mybatisplusdemo.entity.User;<br><br><span class="hljs-keyword">import</span> com.example.mybatisplusdemo.mapper.MenuMapper;<br><span class="hljs-keyword">import</span> com.example.mybatisplusdemo.mapper.UserMapper;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Objects;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> chenzj9</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 重写security过滤器链中的UserDetailsService实现从数据库中查询用户信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022年01月13日 16:39</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span> <span class="hljs-comment">//注意一定要注入道spring容器中</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDetailsServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetailsService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MenuMapper menuMapper;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> UserDetails <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException &#123;<br>    <span class="hljs-comment">//从数据库查询用户信息 这里我根据openID查询</span><br>        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;&gt;();<br>        queryWrapper.eq(User::getUserName,username);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectOne(queryWrapper);<br><span class="hljs-comment">//        如果查询到的用户信息为空，就抛出异常</span><br>        <span class="hljs-keyword">if</span>(Objects.isNull(user))&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;用户openID错误或者是用户不存在&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//TODO 查询用户的权限信息</span><br><span class="hljs-comment">//        List&lt;String&gt; permissions = new ArrayList&lt;&gt;(Arrays.asList(&quot;test&quot;));</span><br>        List&lt;String&gt; permissions = menuMapper.selectPermsByUserId(user.getId());<br><span class="hljs-comment">//        把数据封装成UserDetails</span><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginUser</span>(user,permissions);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后修改接口中的权限信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br><span class="hljs-meta">@PreAuthorize(&quot;hasAuthority(&#x27;system:test:list&#x27;)&quot;)</span><span class="hljs-comment">//权限注解</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">Hello</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>接着重新登陆、测试</p><h4 id="5-自定义失败处理"><a href="#5-自定义失败处理" class="headerlink" title="5.自定义失败处理"></a>5.自定义失败处理</h4><p>​我们还希望再认证失败或者是授权失败的情况下也能和我们接口一样返回相同结构的json,这样就能让前端能对响应进行统一的处理。要实现这个功能我们需要知道SpringSecurity的异常处理机制。</p><p>​在SpringSecurity中，如果我们在认证的或者授权的时候出现了异常会被ExceptionTranslationFilter捕获到。在ExceptionTranslationFilter中会去判断是认证失败还是授权失败出现的异常。</p><p>​如果是认证过程中出现的异常会被封装成AuthenticationException然后调用AccessDeniedHandler对象的方法进行异常处理。</p><p>​所以如果我们需要自定义异常处理，我们只需要自定义AuthenticationEntryPoint和AccessDeniedHandle然后配置给SpringSecurity即可。</p><p>1.自定义实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthenticationEntryPointImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AuthenticationEntryPoint</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commence</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <span class="hljs-type">Result</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(HttpStatus.UNAUTHORIZED.value(), <span class="hljs-string">&quot;用户认证失败，请重新登录！&quot;</span>,<span class="hljs-literal">null</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> JSON.toJSONString(result);<br>        <span class="hljs-comment">//处理异常</span><br>        WebUtils.renderString(httpServletResponse,json);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.mybatisplusdemo.handler;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.example.mybatisplusdemo.utils.Result;<br><span class="hljs-keyword">import</span> com.example.mybatisplusdemo.utils.WebUtils;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpStatus;<br><span class="hljs-keyword">import</span> org.springframework.security.access.AccessDeniedException;<br><span class="hljs-keyword">import</span> org.springframework.security.web.access.AccessDeniedHandler;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> chenzj9</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022年01月21日 16:12</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccessDeniedHandlerImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AccessDeniedHandler</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AccessDeniedException e)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <span class="hljs-type">Result</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(HttpStatus.FORBIDDEN.value(), <span class="hljs-string">&quot;用户授权失败或者您的权限不足，请重新登录！&quot;</span>,<span class="hljs-literal">null</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> JSON.toJSONString(result);<br>        <span class="hljs-comment">//处理异常</span><br>        WebUtils.renderString(httpServletResponse,json);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>定义转json的工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.mybatisplusdemo.utils;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> chenzj9</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 将字符串渲染到客户端</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022年01月21日 15:59</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebUtils</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span>: 将字符串渲染到客户端</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span>: chenzj9</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span>: 2022/1/21 16:02</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response 渲染对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> string 待渲染的字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.String</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">renderString</span><span class="hljs-params">(HttpServletResponse response,String string)</span>&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            response.setStatus(<span class="hljs-number">200</span>);<br>            response.setContentType(<span class="hljs-string">&quot;application/json&quot;</span>);<br>            response.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>            response.getWriter().print(string);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>2.配置给SpringSecurity</p><p>​我们可以使用HttpSecurity对象的方法去配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.mybatisplusdemo.config;<br><br><span class="hljs-keyword">import</span> com.example.mybatisplusdemo.filter.JwtAuthenticationTokenFilter;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationManager;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;<br><span class="hljs-keyword">import</span> org.springframework.security.config.http.SessionCreationPolicy;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;<br><span class="hljs-keyword">import</span> org.springframework.security.web.AuthenticationEntryPoint;<br><span class="hljs-keyword">import</span> org.springframework.security.web.access.AccessDeniedHandler;<br><span class="hljs-keyword">import</span> org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> chenzj9</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> security配置类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022年01月13日 17:44</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span> <span class="hljs-comment">//开启是用prePostEnabled的注解</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringSecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br>    <span class="hljs-comment">//    BCryptPasswordEncoder创建默认的密码加密方式并注入容器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> PasswordEncoder <span class="hljs-title function_">passwordEncoder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;<br><span class="hljs-comment">//    重写方法实现放行请求</span><br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AuthenticationEntryPoint authenticationEntryPoint;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AccessDeniedHandler accessDeniedHandler;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http<br>                .csrf().disable() <span class="hljs-comment">//关闭csrf</span><br><span class="hljs-comment">//                关闭session会话机制</span><br>                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)<br>                .and()<br>                .authorizeRequests()<br>                <span class="hljs-comment">//对于登录接口 允许匿名访问</span><br>                .antMatchers(<span class="hljs-string">&quot;/user/login&quot;</span>).anonymous()<br>                <span class="hljs-comment">//除了上面的都要进行鉴权认证</span><br>                .anyRequest().authenticated();<br><span class="hljs-comment">//        super.configure(http);</span><br>        http<br><span class="hljs-comment">//                在UsernamePasswordAuthenticationFilter之前添加过滤器</span><br>                .addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);<br>        <span class="hljs-comment">//配置异常处理器</span><br>        http.exceptionHandling()<br>                <span class="hljs-comment">//认证失败处理器</span><br>                .authenticationEntryPoint(authenticationEntryPoint)<br>                .and()<br>                <span class="hljs-comment">//授权失败处理器</span><br>                .exceptionHandling().accessDeniedHandler(accessDeniedHandler);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> AuthenticationManager <span class="hljs-title function_">authenticationManagerBean</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.authenticationManagerBean();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="6-跨域"><a href="#6-跨域" class="headerlink" title="6.跨域"></a>6.跨域</h4><p>​浏览器处于安全的考虑，使用XMLHttpRequest对象发起Http请求时必须遵循同源策略，否则就是跨域的Http请求，默认情况下是被禁止的。同源策略要求源相同才能进行正常通信，即协议、域名、端口号都完全一致。</p><p>​前后端分离项目，前端项目和后端项目一般都不是同源的。所以肯定会存在跨域请求的问题。</p><p>​所以我们就要处理一下，让前端能进行跨域请求。</p><p>1.先对SpringBoot配置，允许跨域请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.mybatisplusdemo.configuration;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.CorsRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> chenzj9</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 解决跨域问题</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021年11月30日 17:06</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CrosConfiguration</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCorsMappings</span><span class="hljs-params">(CorsRegistry registry)</span> &#123;<br>        <span class="hljs-comment">//设置允许跨域的路径</span><br>        registry.addMapping(<span class="hljs-string">&quot;/**&quot;</span>)<br>                <span class="hljs-comment">//设置允许跨域请求的域名</span><br>                .allowedOriginPatterns(<span class="hljs-string">&quot;*&quot;</span>)<br>                <span class="hljs-comment">//设置允许请求的方式</span><br>                .allowedMethods(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;HEAD&quot;</span>, <span class="hljs-string">&quot;POST&quot;</span>, <span class="hljs-string">&quot;PUT&quot;</span>, <span class="hljs-string">&quot;DELETE&quot;</span>, <span class="hljs-string">&quot;OPTIONS&quot;</span>)<br>                <span class="hljs-comment">//  是否允许cookie</span><br>                .allowCredentials(<span class="hljs-literal">true</span>)<br>                <span class="hljs-comment">//跨域允许时间</span><br>                .maxAge(<span class="hljs-number">3600</span>)<br>                <span class="hljs-comment">//跨域允许的header属性</span><br>                .allowedHeaders(<span class="hljs-string">&quot;*&quot;</span>);<br>        WebMvcConfigurer.<span class="hljs-built_in">super</span>.addCorsMappings(registry);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>2.配置SpringSecurity的配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http<br>                .csrf().disable() <span class="hljs-comment">//关闭csrf</span><br><span class="hljs-comment">//                关闭session会话机制</span><br>                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)<br>                .and()<br>                .authorizeRequests()<br>                <span class="hljs-comment">//对于登录接口 允许匿名访问</span><br>                .antMatchers(<span class="hljs-string">&quot;/user/login&quot;</span>).anonymous()<br>                <span class="hljs-comment">//除了上面的都要进行鉴权认证</span><br>                .anyRequest().authenticated();<br><span class="hljs-comment">//        super.configure(http);</span><br>        http<br><span class="hljs-comment">//                在UsernamePasswordAuthenticationFilter之前添加过滤器</span><br>                .addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);<br>        <span class="hljs-comment">//配置异常处理器</span><br>        http.exceptionHandling()<br>                <span class="hljs-comment">//认证失败处理器</span><br>                .authenticationEntryPoint(authenticationEntryPoint)<br>                .and()<br>                <span class="hljs-comment">//授权失败处理器</span><br>                .exceptionHandling().accessDeniedHandler(accessDeniedHandler);<br>       <span class="hljs-comment">//允许SpringSecurity跨域</span><br>        http.cors();<br>    &#125;<br></code></pre></td></tr></table></figure><p>在浏览器中测试</p><h4 id="7-遗留小问题"><a href="#7-遗留小问题" class="headerlink" title="7.遗留小问题"></a>7.遗留小问题</h4><h5 id="其他权限校验方法"><a href="#其他权限校验方法" class="headerlink" title="其他权限校验方法"></a>其他权限校验方法</h5><p>​我们前面都是使用@PreAuthorize注册，然后再在其中使用的hasAuthority方法进行校验。SpringSecurity还为我们提供了其他的方法，例如：hasAnyAuthority，hasRole，hasAnyRole，等。</p><p>​这里我们先不急着去介绍这些方法，我们先去理解hasAuthority的原理，然后再去学习其他的方法你就更容易理解，而不是死记硬背区别。并且我们也可以选择定义校验方法，实现我们自己的校验逻辑。</p><p>​hasAuthority方法实际上是执行到了SecurityExpressionRoot的hasAuthority，大家只要根据断点调试即可知道它内部校验原理。</p><p>​它内部其实是调用Authentication的getAuthorities方法获取用户的权限列表。然后判断我们存入的方法参数数据在权限列表中。</p><p>​hasAnyAuthority方法可以传入多个权限，只有用户有其中的任意一个权限就可以访问对应资源。</p><p>​hasRole要求有对应的角色才能访问，但是它内部会把我们传入的参数拼接上<strong>ROLE _</strong>   后在去比较。所以中情况下要用用户对应的权限也要有<strong>ROLE_</strong>  这个前缀才行。</p><p>​hasAnyRole要求任意的角色才能访问，但是它内部会把我们传入的参数拼接上<strong>ROLE _</strong>   后在去比较。所以中情况下要用用户对应的权限也要有<strong>ROLE_</strong>  这个前缀才行。</p><h5 id="自定义权限校验方法"><a href="#自定义权限校验方法" class="headerlink" title="自定义权限校验方法"></a>自定义权限校验方法</h5><p>​我们也可以定义自己的权限检验方法。在@PreAuthorize注解中使用我们的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.mybatisplusdemo.expression;<br><br><span class="hljs-keyword">import</span> com.example.mybatisplusdemo.entity.LoginUser;<br><span class="hljs-keyword">import</span> org.springframework.security.core.Authentication;<br><span class="hljs-keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> chenzj9</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 自定义权限校验方法</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022年01月21日 22:10</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component(&quot;ex&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SGExpressionRoot</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasAuthority</span><span class="hljs-params">(String authority)</span>&#123;<br>        <span class="hljs-comment">//获取当前用户的权限</span><br>        <span class="hljs-type">Authentication</span> <span class="hljs-variable">authentication</span> <span class="hljs-operator">=</span> SecurityContextHolder.getContext().getAuthentication();<br>        <span class="hljs-type">LoginUser</span> <span class="hljs-variable">loginUser</span> <span class="hljs-operator">=</span> (LoginUser) authentication.getPrincipal();<br>        List&lt;String&gt; permission = loginUser.getPermission();<br>        <span class="hljs-comment">//判断用户权限集合中是否存在authority</span><br>        <span class="hljs-keyword">return</span> permission.contains(authority);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>新增接口方法测试(注意使用@ex相当于获取bean容器中的名字为ex的对象，然后就能调用bean中的自定义方法)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-meta">@PreAuthorize(&quot;@ex.hasAuthority(&#x27;system:test:list&#x27;)&quot;)</span> <span class="hljs-comment">//自定义权限规则校验</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">Test</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="基于配置的权限控制"><a href="#基于配置的权限控制" class="headerlink" title="基于配置的权限控制"></a>基于配置的权限控制</h5><p>​我们也可以在配置类中使用配置的方法对资源进行权限控制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> chenzj9</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> security配置类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022年01月13日 17:44</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span> <span class="hljs-comment">//开启是用prePostEnabled的注解</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringSecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br>    <span class="hljs-comment">//    BCryptPasswordEncoder创建默认的密码加密方式并注入容器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> PasswordEncoder <span class="hljs-title function_">passwordEncoder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;<br><span class="hljs-comment">//    重写方法实现放行请求</span><br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AuthenticationEntryPoint authenticationEntryPoint;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AccessDeniedHandler accessDeniedHandler;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http<br>                .csrf().disable() <span class="hljs-comment">//关闭csrf</span><br><span class="hljs-comment">//                关闭session会话机制</span><br>                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)<br>                .and()<br>                .authorizeRequests()<br>                <span class="hljs-comment">//对于登录接口 允许匿名访问</span><br>                .antMatchers(<span class="hljs-string">&quot;/user/login&quot;</span>).anonymous()<br>                .antMatchers(<span class="hljs-string">&quot;/config/testAuthority&quot;</span>).hasAuthority(<span class="hljs-string">&quot;system:test:list&quot;</span>) <span class="hljs-comment">//也可以在这里配置接口所需权限字符 当然也可以使用其他的方法比如hasROLE()、hasAnyAuthority()等</span><br>                <span class="hljs-comment">//除了上面的都要进行鉴权认证</span><br>                .anyRequest().authenticated();<br><span class="hljs-comment">//        super.configure(http);</span><br>        http<br><span class="hljs-comment">//                在UsernamePasswordAuthenticationFilter之前添加过滤器</span><br>                .addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);<br>        <span class="hljs-comment">//配置异常处理器</span><br>        http.exceptionHandling()<br>                <span class="hljs-comment">//认证失败处理器</span><br>                .authenticationEntryPoint(authenticationEntryPoint)<br>                .and()<br>                <span class="hljs-comment">//授权失败处理器</span><br>                .exceptionHandling().accessDeniedHandler(accessDeniedHandler);<br>        <span class="hljs-comment">//允许SpringSecurity跨域</span><br>        http.cors();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> AuthenticationManager <span class="hljs-title function_">authenticationManagerBean</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.authenticationManagerBean();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后新增接口测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/config/testAuthority&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">testAuthority</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> Result.success(<span class="hljs-string">&quot;访问成功!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h5><p>​CRSF是只跨站请求伪造（Cross-site request forgery），是web常见的攻击之一。</p><p>​SpringSecurity去防止CRSF攻击的方式就是通过crsf_token。后端会生成一个crsf_token，前端发起请求的时候需要携带这个crsf_token后端会有过滤器进行检验，如果没有携带或者是伪造的就不允许访问。</p><p>​我们可以发现CRSF攻击依靠的是cookie中所携带的认证信息。但是在前后端分离的项目中，我们的认证信息其实是token，而token并不是存储在cookie中，并且需要前端代码去把token设置的请求中才可以，所以CRSF攻击就不用担心了。</p><h5 id="认证成功处理器"><a href="#认证成功处理器" class="headerlink" title="认证成功处理器"></a>认证成功处理器</h5><p>​实际上在UsernamePasswordAuthenFilter进行登录认证的时候，如果登录认证成功了是会调用AuthenticationSuccessHandler的方法进行认证成功后的处理的。AuthenticationSuccessHandler就是登录成功处理器。</p><p>​我们也可以自己去自定义成功处理器进行成功后的相应处理。</p><p>​注意：这时候就不能使用之前的项目进行测试了，因为现在的项目在config阶段时已经没有了UsernamePasswordAuthenFilter了，所以要重新创建项目测试。</p><h5 id="认证成功处理器-1"><a href="#认证成功处理器-1" class="headerlink" title="认证成功处理器"></a>认证成功处理器</h5><h5 id="其他认证方案"><a href="#其他认证方案" class="headerlink" title="其他认证方案"></a>其他认证方案</h5><p>实际上在UsernamePasswordAuthenticationFilter进行认证的时候，如果认证失败了是会调用AuthenticationFailureHandler的方法进行认证失败后的处理的。AuthenticationFailureHandler就是认证失败处理器。</p><p>​我们也可以自定义认证失败处理器进行失败后的相应处理。注意这时候也不能用原本的项目实现改功能</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Typora+PicGo自动上传图片到Gitee</title>
    <link href="/2022/08/12/Typora-PicGo%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%88%B0Gitee/"/>
    <url>/2022/08/12/Typora-PicGo%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%88%B0Gitee/</url>
    
    <content type="html"><![CDATA[<h3 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h3><ul><li>Typora</li><li>Pic Go</li></ul><h3 id="使用平台"><a href="#使用平台" class="headerlink" title="使用平台"></a>使用平台</h3><ul><li>gitee</li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="创建gitee仓库"><a href="#创建gitee仓库" class="headerlink" title="创建gitee仓库"></a>创建gitee仓库</h4><ol><li>创建一个gitee账号（如果已经拥有则直接登录），新建一个仓库</li></ol><p><img src="https://gitee.com/czrgitee/typora-drawing-bed/raw/master/image/202208121622887.png" alt="image-20220812162216785"></p><p><img src="https://gitee.com/czrgitee/typora-drawing-bed/raw/master/image/202208121622846.png" alt="image-20220812162257752"></p><ol start="2"><li>添加私人令牌</li></ol><p><img src="https://gitee.com/czrgitee/typora-drawing-bed/raw/master/image/202208121626837.png" alt="image-20220812162633742"></p><p><img src="https://gitee.com/czrgitee/typora-drawing-bed/raw/master/image/202208121627238.png" alt="image-20220812162728146"></p><p>把生成的令牌复制，在PicGo中要使用</p><h4 id="PicGo配置"><a href="#PicGo配置" class="headerlink" title="PicGo配置"></a>PicGo配置</h4><ol><li>下载安装gitee插件，请看准，别下错</li></ol><p><img src="https://gitee.com/czrgitee/typora-drawing-bed/raw/master/image/202208121631882.png" alt="image-20220812163108825"></p><p><img src="https://gitee.com/czrgitee/typora-drawing-bed/raw/master/image/202208121633182.png" alt="image-20220812163356112"></p><p><img src="https://gitee.com/czrgitee/typora-drawing-bed/raw/master/image/202208121634759.png" alt="image-20220812163450685"></p><p><img src="https://gitee.com/czrgitee/typora-drawing-bed/raw/master/image/202208121635378.png" alt="image-20220812163506304"></p><p>按照上述步骤，PicGo设置完成，可以选择上传区进行测试</p><h4 id="Typora配置"><a href="#Typora配置" class="headerlink" title="Typora配置"></a>Typora配置</h4><p>选择文件 -&gt; 偏好设置 -&gt; 图像，按照下图配置，PicGo路径选择自己的安装路径</p><p><img src="https://gitee.com/czrgitee/typora-drawing-bed/raw/master/image/202208121638590.png" alt="image-20220812163849499"></p><p>配置完成后，可以点击验证图片上传选项，基本上没问题了</p><h4 id="PS："><a href="#PS：" class="headerlink" title="PS："></a>PS：</h4><ol><li>上传不成功可能是gitee仓库没接受开源协议，去找找</li><li>图片名字带有特殊字符也会导致上传失败，发现Error: read file  error字样，先看图片文件名是否太特别</li><li>其他待补充。。。</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu配置Nginx，并部署vue项目</title>
    <link href="/2022/08/12/Ubuntu%E9%85%8D%E7%BD%AENginx%EF%BC%8C%E5%B9%B6%E9%83%A8%E7%BD%B2vue%E9%A1%B9%E7%9B%AE/"/>
    <url>/2022/08/12/Ubuntu%E9%85%8D%E7%BD%AENginx%EF%BC%8C%E5%B9%B6%E9%83%A8%E7%BD%B2vue%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="在-x2F-usr-x2F-local-x2F-lib-x2F-创建目录"><a href="#在-x2F-usr-x2F-local-x2F-lib-x2F-创建目录" class="headerlink" title="在&#x2F;usr&#x2F;local&#x2F;lib&#x2F;创建目录"></a>在&#x2F;usr&#x2F;local&#x2F;lib&#x2F;创建目录</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">mkdir /usr/local/lib/nodejs<br></code></pre></td></tr></table></figure><h3 id="下载nodejs"><a href="#下载nodejs" class="headerlink" title="下载nodejs"></a>下载nodejs</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">wget https://npmmirror.com/mirrors/node/v16.14.1/node-v16.14.1-linux-x64.tar.xz<br></code></pre></td></tr></table></figure><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">tar vxf 压缩包  解压路径<br></code></pre></td></tr></table></figure><h3 id="进行软链接创建"><a href="#进行软链接创建" class="headerlink" title="进行软链接创建"></a>进行软链接创建</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">sudo ln -s /usr/local/lib/nodejs/node-v16.14.1-linux-x64/bin/node /usr/bin/node<br>sudo ln -s /usr/local/lib/nodejs/node-v16.14.1-linux-x64/bin/npm /usr/bin/npm<br></code></pre></td></tr></table></figure><h3 id="设置nodejs镜像源"><a href="#设置nodejs镜像源" class="headerlink" title="设置nodejs镜像源"></a>设置nodejs镜像源</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">sudo npm config set registry https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure><h3 id="上传vue"><a href="#上传vue" class="headerlink" title="上传vue"></a>上传vue</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">cd /var/www/html<br>mkdir 项目名称<br>上传dist到项目名称文件夹<br></code></pre></td></tr></table></figure><h3 id="修改nginx配置"><a href="#修改nginx配置" class="headerlink" title="修改nginx配置"></a>修改nginx配置</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">cd  /etc/nginx/sites-available<br>vim default<br><br></code></pre></td></tr></table></figure><ul><li><img src="https://gitee.com/czrgitee/typora-drawing-bed/raw/master/image/202208121540655.png" alt="image-20220328221851719"></li></ul><h3 id="检查nginx语法"><a href="#检查nginx语法" class="headerlink" title="检查nginx语法"></a>检查nginx语法</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs txt">sudo nginx -t<br><br>出现：<br>nginx: the configuration file /etc/nginx/nginx.conf syntax is ok<br>nginx: configuration file /etc/nginx/nginx.conf test is successful<br>说明语法没有错误<br></code></pre></td></tr></table></figure><h3 id="重启nginx"><a href="#重启nginx" class="headerlink" title="重启nginx"></a>重启nginx</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">sudo service nginx restart<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>关于js的一些坑</title>
    <link href="/2022/08/12/%E5%85%B3%E4%BA%8Ejs%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/"/>
    <url>/2022/08/12/%E5%85%B3%E4%BA%8Ejs%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h1 id="关于js的一些坑"><a href="#关于js的一些坑" class="headerlink" title="关于js的一些坑"></a>关于js的一些坑</h1><h3 id="关于所有页面共享变量"><a href="#关于所有页面共享变量" class="headerlink" title="关于所有页面共享变量"></a>关于所有页面共享变量</h3><p>两个html页面没有办法同时使用一个js变量</p><p>当两个html页面分别引入相同的js文件的时候，js是互不干扰的，a页面的js就是a页面用，b页面的js就是b页面用</p><p>要想实现变量全局共享，只能使用html的自带的sessionStorage、localStorage 或者cookie</p><p>存放变量实现方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> msg = <span class="hljs-string">&quot;全局引用变量&quot;</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&quot;msg&quot;</span>,msg); <span class="hljs-comment">//key-value方式</span><br></code></pre></td></tr></table></figure><p>获取变量实现方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//获取到的数据为字符串数据，如果要换成别的格式，可以对数据进行解析</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&quot;msg&quot;</span>); <br></code></pre></td></tr></table></figure><p>如果想监听全局变量改变事件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;storage&#x27;</span>,<span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-comment">//获取被修改的键值</span><br>    <span class="hljs-keyword">if</span> (e.<span class="hljs-property">key</span> == <span class="hljs-string">&#x27;RISKID&#x27;</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);<br>    &#125;<br>&#125;,<span class="hljs-literal">false</span>);<br><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/czrgitee/typora-drawing-bed/raw/master/image/202208121539593.png" alt="image-20220412143542180">（插入图片后敲一个空格就会左对齐)</p><p>js这种监听方式存在一个弊端，如果多次触发监听事件的话，会导致重复绑定，例如第一次触发会调用一次方法，第二次触发就会调用两次方法，包括第一次触发的方法和第二次触发的方法，如果是onclick事件就不会造成重复绑定</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;storage&quot;</span>,(<span class="hljs-function"><span class="hljs-params">ev</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span>(ev.<span class="hljs-property">key</span>===<span class="hljs-string">&#x27;TIME&#x27;</span>)&#123;<br>        <span class="hljs-keyword">if</span> (ev.<span class="hljs-property">isTrusted</span>)&#123;<br>            <span class="hljs-comment">//在localStorage改变后直接刷新这个页面</span><br>            <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-title function_">reload</span>();<br>        &#125;<br>    &#125;<br>&#125;),<span class="hljs-literal">false</span>)<br><br><span class="hljs-comment">//重新获取一次(一开始如果已经调用过了，就不用重复写了，刷新页面即可)</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">start</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> item = <span class="hljs-variable language_">window</span>.<span class="hljs-property">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&quot;TIME&quot;</span>);<br><br>    <span class="hljs-comment">//将item转换为数字数组</span><br>    <span class="hljs-keyword">let</span> item_array = item.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;,&quot;</span>);<br>    <span class="hljs-comment">//将item_array转换为数字</span><br>    <span class="hljs-keyword">let</span> item_array_number = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; item_array.<span class="hljs-property">length</span>; i++) &#123;<br>        item_array_number.<span class="hljs-title function_">push</span>(<span class="hljs-title class_">Number</span>(item_array[i]));<br>    &#125;<br>&#125;<br><span class="hljs-title function_">start</span>();<br></code></pre></td></tr></table></figure><h3 id="关于输入框赋值与取值"><a href="#关于输入框赋值与取值" class="headerlink" title="关于输入框赋值与取值"></a>关于输入框赋值与取值</h3><p>赋值 ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;#input1&quot;</span>).<span class="hljs-title function_">val</span>(<span class="hljs-string">&#x27;要赋值的内容&#x27;</span>);<br></code></pre></td></tr></table></figure><p>取值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;#input1&quot;</span>).<span class="hljs-title function_">val</span>();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>echarts时间轴动态数据变化配置</title>
    <link href="/2022/08/12/echarts%E6%97%B6%E9%97%B4%E8%BD%B4%E5%8A%A8%E6%80%81%E6%95%B0%E6%8D%AE%E5%8F%98%E5%8C%96%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/08/12/echarts%E6%97%B6%E9%97%B4%E8%BD%B4%E5%8A%A8%E6%80%81%E6%95%B0%E6%8D%AE%E5%8F%98%E5%8C%96%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="关于echarts按照时间轴动态数据变化"><a href="#关于echarts按照时间轴动态数据变化" class="headerlink" title="关于echarts按照时间轴动态数据变化"></a>关于echarts按照时间轴动态数据变化</h1><h2 id="官网示例"><a href="#官网示例" class="headerlink" title="官网示例"></a>官网示例</h2><ol><li>echarts图表的配置项中有一个timeline的配置项，是专门用来做动态数据变化的</li></ol><p><img src="https://gitee.com/czrgitee/typora-drawing-bed/raw/master/image/202208121538430.png" alt="image-20220417174759332"></p><ol start="2"><li>根据官网的例子可知，我们只要把需要循环播放的数据<em><strong>按照原来的格式</strong></em>整理出来，然后做一个循环，把数据push进options中</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs js">myChart.<span class="hljs-title function_">setOption</span>(&#123;<br>    <span class="hljs-comment">// `baseOption` 的属性.</span><br>    <span class="hljs-attr">timeline</span>: &#123;<br>        ...,<br>        <span class="hljs-comment">// `timeline.data` 中的每一项，对应于 `options`</span><br>        <span class="hljs-comment">// 数组中的每个 `option`</span><br>        <span class="hljs-attr">data</span>: [<span class="hljs-string">&#x27;2002-01-01&#x27;</span>, <span class="hljs-string">&#x27;2003-01-01&#x27;</span>, <span class="hljs-string">&#x27;2004-01-01&#x27;</span>]<br>    &#125;,<br>    <span class="hljs-attr">grid</span>: &#123; ... &#125;,<br>    <span class="hljs-attr">xAxis</span>: [ ... ],<br>    <span class="hljs-attr">yAxis</span>: [ ... ],<br>    <span class="hljs-attr">series</span>: [&#123;<br>        <span class="hljs-comment">// 系列一的一些其他配置</span><br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;bar&#x27;</span>,<br>        ...<br>    &#125;, &#123;<br>        <span class="hljs-comment">// 系列二的一些其他配置</span><br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;line&#x27;</span>,<br>        ...<br>    &#125;, &#123;<br>        <span class="hljs-comment">// 系列三的一些其他配置</span><br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;pie&#x27;</span>,<br>        ...<br>    &#125;],<br>    <span class="hljs-comment">// `switchableOption`s:</span><br>    <span class="hljs-attr">options</span>: [&#123;<br>        <span class="hljs-comment">// 这是&#x27;2002-01-01&#x27; 对应的 option</span><br>        <span class="hljs-attr">title</span>: &#123;<br>            <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;2002年统计值&#x27;</span><br>        &#125;,<br>        <span class="hljs-attr">series</span>: [<br>            &#123; <span class="hljs-attr">data</span>: [] &#125;, <span class="hljs-comment">// 系列一的数据</span><br>            &#123; <span class="hljs-attr">data</span>: [] &#125;, <span class="hljs-comment">// 系列二的数据</span><br>            &#123; <span class="hljs-attr">data</span>: [] &#125;  <span class="hljs-comment">// 系列三的数据</span><br>        ]<br>    &#125;, &#123;<br>        <span class="hljs-comment">// 这是&#x27;2003-01-01&#x27; 对应的 option</span><br>        <span class="hljs-attr">title</span>: &#123;<br>            <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;2003年统计值&#x27;</span><br>        &#125;,<br>        <span class="hljs-attr">series</span>: [<br>            &#123; <span class="hljs-attr">data</span>: [] &#125;,<br>            &#123; <span class="hljs-attr">data</span>: [] &#125;,<br>            &#123; <span class="hljs-attr">data</span>: [] &#125;<br>        ]<br>    &#125;, &#123;<br>        <span class="hljs-comment">// 这是&#x27;2004-01-01&#x27; 对应的 option</span><br>        <span class="hljs-attr">title</span>: &#123;<br>            <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;2004年统计值&#x27;</span><br>        &#125;,<br>        <span class="hljs-attr">series</span>: [<br>            &#123; <span class="hljs-attr">data</span>: [] &#125;,<br>            &#123; <span class="hljs-attr">data</span>: [] &#125;,<br>            &#123; <span class="hljs-attr">data</span>: [] &#125;<br>        ]<br>    &#125;]<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="中国地图例子"><a href="#中国地图例子" class="headerlink" title="中国地图例子"></a>中国地图例子</h2><ol start="3"><li>具体实践（中国地图）</li></ol><p>html代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/echarts.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/jquery-3.6.0.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/china.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-comment">&lt;!--引入中国地图--&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;c2&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/yq-china.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>js代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//初始化元素</span><br><span class="hljs-keyword">var</span> myChart = echarts.<span class="hljs-title function_">init</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;c2&#x27;</span>), <span class="hljs-string">&#x27;grey&#x27;</span>);<br><span class="hljs-comment">//初始化数据</span><br><span class="hljs-keyword">var</span> yqdata = [&#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;value&#x27;</span>: <span class="hljs-number">300</span>&#125;, &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;value&#x27;</span>: <span class="hljs-number">3000</span>&#125;,&#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;广东&#x27;</span>, <span class="hljs-string">&#x27;value&#x27;</span>: <span class="hljs-number">30000</span>&#125;]<br><span class="hljs-comment">//图表配置项</span><br><span class="hljs-keyword">var</span> option = &#123;<br>    <span class="hljs-comment">//时间轴配置！</span><br>    <span class="hljs-attr">timeline</span>:&#123;<br>        <span class="hljs-attr">axisType</span>: <span class="hljs-string">&#x27;category&#x27;</span>,  <span class="hljs-comment">//轴的类型。可选值为：value，category，time</span><br>        <span class="hljs-attr">autoPlay</span>: <span class="hljs-literal">true</span>,  <span class="hljs-comment">//自动播放</span><br>        <span class="hljs-attr">playInterval</span>: <span class="hljs-number">500</span>,  <span class="hljs-comment">//播放间隔</span><br>        <span class="hljs-attr">data</span>: [<span class="hljs-string">&#x27;2000&#x27;</span>,<span class="hljs-string">&#x27;2010&#x27;</span>,<span class="hljs-string">&#x27;2020&#x27;</span>],  <span class="hljs-comment">//时间轴数据，展示 在底部</span><br>        <span class="hljs-attr">label</span>:&#123;  <span class="hljs-comment">//时间轴文本</span><br>            <span class="hljs-attr">fontSize</span>: <span class="hljs-number">14</span>  <span class="hljs-comment">//文本大小</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">title</span>: &#123;  <span class="hljs-comment">//图表标题</span><br>        <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-attr">subtext</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-attr">x</span>: <span class="hljs-string">&#x27;left&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">tooltip</span>: &#123;<br>        <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;item&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">visualMap</span>: &#123;  <span class="hljs-comment">//地图中颜色深浅的设置</span><br>        <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">x</span>: <span class="hljs-string">&#x27;left&#x27;</span>,  <span class="hljs-comment">//图例左边距</span><br>        <span class="hljs-attr">y</span>: <span class="hljs-string">&#x27;bottom&#x27;</span>,  <span class="hljs-comment">//图例下边距</span><br>        <span class="hljs-attr">textStyle</span>: &#123;<br>            <span class="hljs-attr">fontSize</span>: <span class="hljs-number">8</span>,<br>            <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#ffffff&#x27;</span><br>        &#125;,<br>        <span class="hljs-attr">splitList</span>: [&#123;<span class="hljs-attr">start</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">end</span>: <span class="hljs-number">9</span>&#125;,<br>            &#123;<span class="hljs-attr">start</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">end</span>: <span class="hljs-number">99</span>&#125;,<br>            &#123;<span class="hljs-attr">start</span>: <span class="hljs-number">100</span>, <span class="hljs-attr">end</span>: <span class="hljs-number">999</span>&#125;,<br>            &#123;<span class="hljs-attr">start</span>: <span class="hljs-number">1000</span>, <span class="hljs-attr">end</span>: <span class="hljs-number">9999</span>&#125;,<br>            &#123;<span class="hljs-attr">start</span>: <span class="hljs-number">10000</span>&#125;],<br>        <span class="hljs-attr">color</span>: [<span class="hljs-string">&#x27;#8A3310&#x27;</span>, <span class="hljs-string">&#x27;#C64918&#x27;</span>, <span class="hljs-string">&#x27;#E55B25&#x27;</span>, <span class="hljs-string">&#x27;#F2AD92&#x27;</span>, <span class="hljs-string">&#x27;#F9DCD1&#x27;</span>]<br>    &#125;, <br>    <span class="hljs-comment">//属性配置，与正常图表属性配置一致，不用给data赋值</span><br>    <span class="hljs-attr">series</span>: [&#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;累计确诊人数&#x27;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;map&#x27;</span>,<br>        <span class="hljs-attr">mapType</span>: <span class="hljs-string">&#x27;china&#x27;</span>,<br>        <span class="hljs-attr">roam</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">itemStyle</span>: &#123;<br>            <span class="hljs-attr">normal</span>: &#123;<br>                <span class="hljs-attr">borderWidth</span>: <span class="hljs-number">.5</span>,<span class="hljs-comment">//区域边框宽度</span><br>                <span class="hljs-attr">borderColor</span>: <span class="hljs-string">&#x27;#009fe8&#x27;</span>,  <span class="hljs-comment">//区域边框颜色</span><br>                <span class="hljs-attr">areaColor</span>: <span class="hljs-string">&#x27;#ffffff&#x27;</span>,  <span class="hljs-comment">//区域颜色</span><br>            &#125;,<br>            <span class="hljs-attr">emphasis</span>: &#123; <span class="hljs-comment">//鼠标划过高亮</span><br>                <span class="hljs-attr">borderWidth</span>: <span class="hljs-number">.5</span>, <span class="hljs-attr">borderColor</span>: <span class="hljs-string">&#x27;#4b0082&#x27;</span>,  <span class="hljs-comment">//区域边框颜色</span><br>                <span class="hljs-attr">areaColor</span>: <span class="hljs-string">&#x27;#ffffff&#x27;</span>,  <span class="hljs-comment">//区域颜色</span><br>            &#125;<br>        &#125;,<br>        <span class="hljs-attr">label</span>: &#123;<br>            <span class="hljs-attr">normal</span>: &#123;<br>                <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span>,  <span class="hljs-comment">//省份名称</span><br>                <span class="hljs-attr">fontSize</span>: <span class="hljs-number">8</span><br>            &#125;,<br>            <span class="hljs-attr">emphasis</span>: &#123;<br>                <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">fontSize</span>: <span class="hljs-number">8</span><br>            &#125;<br>        &#125;,<br>        <span class="hljs-comment">// data: yqdata  //数据</span><br>        <span class="hljs-comment">// data: []  //数据</span><br>    &#125;],<br><span class="hljs-comment">//需要循环的数据放这里，例如下面</span><br>    <span class="hljs-attr">options</span>: [<br>        &#123;<span class="hljs-attr">series</span>: [&#123;<span class="hljs-attr">data</span>: [&#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">300</span>&#125;, &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">3000</span>&#125;,&#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;广东&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">30</span>&#125;]&#125;]&#125;,<br>        &#123;<span class="hljs-attr">series</span>: [&#123;<span class="hljs-attr">data</span>: [&#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">600</span>&#125;, &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">6000</span>&#125;,&#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;广东&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">600</span>&#125;]&#125;]&#125;,<br>        &#123;<span class="hljs-attr">series</span>: [&#123;<span class="hljs-attr">data</span>: [&#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">900</span>&#125;, &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">9000</span>&#125;,&#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;广东&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">9000</span>&#125;]&#125;]&#125;,<br>    ]<br>&#125;;<br><br>myChart.<span class="hljs-title function_">setOption</span>(option,<span class="hljs-literal">true</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>POI读取与写入操作</title>
    <link href="/2022/08/12/POI%E8%AF%BB%E5%8F%96%E4%B8%8E%E5%86%99%E5%85%A5%E6%93%8D%E4%BD%9C/"/>
    <url>/2022/08/12/POI%E8%AF%BB%E5%8F%96%E4%B8%8E%E5%86%99%E5%85%A5%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="POI报表的操作流程"><a href="#POI报表的操作流程" class="headerlink" title="POI报表的操作流程"></a>POI报表的操作流程</h1><hr><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><img src="https://gitee.com/czrgitee/typora-drawing-bed/raw/master/image/202208121541573.png" alt="image-20220417221538547"></p><h2 id="写入操作"><a href="#写入操作" class="headerlink" title="写入操作"></a>写入操作</h2><h3 id="03版写入操作"><a href="#03版写入操作" class="headerlink" title="03版写入操作"></a>03版写入操作</h3><ol><li>创建一个工作簿</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Workbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HSSFWorkbook</span>();<br></code></pre></td></tr></table></figure><ol start="2"><li>创建一个工作表</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Sheet</span> <span class="hljs-variable">sheet</span> <span class="hljs-operator">=</span> workbook.createSheet();  <span class="hljs-comment">//默认是sheet，可以自己指定名字</span><br></code></pre></td></tr></table></figure><ol start="3"><li>创建一行</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Row</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> sheet.createRow(<span class="hljs-number">0</span>);  <span class="hljs-comment">// 0代表第一行，1代表第二行，以此类推</span><br></code></pre></td></tr></table></figure><ol start="4"><li>创建一列</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Cell</span> <span class="hljs-variable">cell</span> <span class="hljs-operator">=</span> row.createCell(<span class="hljs-number">0</span>);  <span class="hljs-comment">// 0代表第一列，1代表第二列，以此类推</span><br></code></pre></td></tr></table></figure><ol start="5"><li>单元格写入数据</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">cell.setCellValue(<span class="hljs-string">&quot;第一行第一列单元格的内容&quot;</span>);<br><br><span class="hljs-comment">//简写</span><br>sheet.createRow(<span class="hljs-number">1</span>).createCell(<span class="hljs-number">0</span>).setCellValue(<span class="hljs-string">&quot;第二行第一列单元格的内容&quot;</span>);<br></code></pre></td></tr></table></figure><ol start="6"><li>保存文件</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//保存文件</span><br>workbook.write(<span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.FileOutputStream(<span class="hljs-string">&quot;path.xls&quot;</span>));<br><span class="hljs-comment">//关闭流</span><br>workbook.close();<br></code></pre></td></tr></table></figure><hr><h3 id="07版写入操作"><a href="#07版写入操作" class="headerlink" title="07版写入操作"></a>07版写入操作</h3><ol><li>创建一个工作簿</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Workbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XSSFWorkbook</span>();<br></code></pre></td></tr></table></figure><ol start="2"><li>创建一个工作表</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Sheet</span> <span class="hljs-variable">sheet</span> <span class="hljs-operator">=</span> workbook.createSheet();  <span class="hljs-comment">//默认是sheet，可以自己指定名字</span><br></code></pre></td></tr></table></figure><ol start="3"><li>创建一行</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Row</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> sheet.createRow(<span class="hljs-number">0</span>);  <span class="hljs-comment">// 0代表第一行，1代表第二行，以此类推</span><br></code></pre></td></tr></table></figure><ol start="4"><li>创建一列</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Cell</span> <span class="hljs-variable">cell</span> <span class="hljs-operator">=</span> row.createCell(<span class="hljs-number">0</span>);  <span class="hljs-comment">// 0代表第一列，1代表第二列，以此类推</span><br></code></pre></td></tr></table></figure><ol start="5"><li>单元格写入数据</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">cell.setCellValue(<span class="hljs-string">&quot;第一行第一列单元格的内容&quot;</span>);<br><br><span class="hljs-comment">//简写</span><br>sheet.createRow(<span class="hljs-number">1</span>).createCell(<span class="hljs-number">0</span>).setCellValue(<span class="hljs-string">&quot;第二行第一列单元格的内容&quot;</span>);<br></code></pre></td></tr></table></figure><ol start="6"><li>保存文件</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//保存文件</span><br>workbook.write(<span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.FileOutputStream(<span class="hljs-string">&quot;path.xlsx&quot;</span>));<br><span class="hljs-comment">//关闭流</span><br>workbook.close();<br></code></pre></td></tr></table></figure><hr><h3 id="03版大文件写入"><a href="#03版大文件写入" class="headerlink" title="03版大文件写入"></a>03版大文件写入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write03BigData</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//开始时间</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>    <span class="hljs-comment">//创建工作簿</span><br>    <span class="hljs-type">Workbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HSSFWorkbook</span>();<br>    <span class="hljs-comment">//创建工作表</span><br>    <span class="hljs-type">Sheet</span> <span class="hljs-variable">sheet</span> <span class="hljs-operator">=</span> workbook.createSheet();  <span class="hljs-comment">//默认是sheet，可以自己指定名字</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">rowNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; rowNum &lt; <span class="hljs-number">65536</span>; rowNum++) &#123;<br>        <span class="hljs-comment">//创建行</span><br>        <span class="hljs-type">Row</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> sheet.createRow(rowNum);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">cellNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; cellNum &lt; <span class="hljs-number">5</span>; cellNum++) &#123;<br>            <span class="hljs-comment">//创建列</span><br>            row.createCell(cellNum).setCellValue(cellNum);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//结束时间</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>    System.out.println((start-end));<br><br>    <span class="hljs-comment">//保存文件</span><br>    workbook.write(<span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.FileOutputStream(<span class="hljs-string">&quot;03BigData.xls&quot;</span>));<br>    <span class="hljs-comment">//关闭流</span><br>    workbook.close();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="07版大文件写入"><a href="#07版大文件写入" class="headerlink" title="07版大文件写入"></a>07版大文件写入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write07BigData</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//开始时间</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>    <span class="hljs-comment">//创建工作簿</span><br>    <span class="hljs-type">Workbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XSSFWorkbook</span>();<br>    <span class="hljs-comment">//创建工作表</span><br>    <span class="hljs-type">Sheet</span> <span class="hljs-variable">sheet</span> <span class="hljs-operator">=</span> workbook.createSheet();  <span class="hljs-comment">//默认是sheet，可以自己指定名字</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">rowNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; rowNum &lt; <span class="hljs-number">70000</span>; rowNum++) &#123;<br>        <span class="hljs-comment">//创建行</span><br>        <span class="hljs-type">Row</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> sheet.createRow(rowNum);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">cellNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; cellNum &lt; <span class="hljs-number">5</span>; cellNum++) &#123;<br>            <span class="hljs-comment">//创建列</span><br>            row.createCell(cellNum).setCellValue(cellNum);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//结束时间</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>    System.out.println((start-end)/<span class="hljs-number">1000</span>);<br><br>    <span class="hljs-comment">//保存文件</span><br>    workbook.write(<span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.FileOutputStream(<span class="hljs-string">&quot;07BigData.xlsx&quot;</span>));<br>    <span class="hljs-comment">//关闭流</span><br>    workbook.close();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="07版大文件写入升级版"><a href="#07版大文件写入升级版" class="headerlink" title="07版大文件写入升级版"></a>07版大文件写入升级版</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write07BigDataS</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//开始时间</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>    <span class="hljs-comment">//创建工作簿</span><br>    <span class="hljs-type">Workbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SXSSFWorkbook</span>();<br>    <span class="hljs-comment">//创建工作表</span><br>    <span class="hljs-type">Sheet</span> <span class="hljs-variable">sheet</span> <span class="hljs-operator">=</span> workbook.createSheet();  <span class="hljs-comment">//默认是sheet，可以自己指定名字</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">rowNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; rowNum &lt; <span class="hljs-number">70000</span>; rowNum++) &#123;<br>        <span class="hljs-comment">//创建行</span><br>        <span class="hljs-type">Row</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> sheet.createRow(rowNum);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">cellNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; cellNum &lt; <span class="hljs-number">5</span>; cellNum++) &#123;<br>            <span class="hljs-comment">//创建列</span><br>            row.createCell(cellNum).setCellValue(cellNum);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//结束时间</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>    System.out.println((start-end)/<span class="hljs-number">1000</span>);<br><br>    <span class="hljs-comment">//保存文件</span><br>    workbook.write(<span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.FileOutputStream(<span class="hljs-string">&quot;07BigDataS.xlsx&quot;</span>));<br>    <span class="hljs-comment">//删除临时文件</span><br>    ((SXSSFWorkbook) workbook).dispose();<br>    <span class="hljs-comment">//关闭流</span><br>    workbook.close();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="读取操作"><a href="#读取操作" class="headerlink" title="读取操作"></a>读取操作</h2><h3 id="03版读取操作"><a href="#03版读取操作" class="headerlink" title="03版读取操作"></a>03版读取操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">read03</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//获取文件流</span><br>    <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;03.xls&quot;</span>);<br>    <span class="hljs-comment">//创建工作簿</span><br>    <span class="hljs-type">Workbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HSSFWorkbook</span>(inputStream);<br>    <span class="hljs-comment">//获取工作表</span><br>    <span class="hljs-type">Sheet</span> <span class="hljs-variable">sheet</span> <span class="hljs-operator">=</span> workbook.getSheet(<span class="hljs-string">&quot;sheet0&quot;</span>);  <span class="hljs-comment">//根据表名获取表</span><br>    <span class="hljs-type">Sheet</span> <span class="hljs-variable">sheetAt</span> <span class="hljs-operator">=</span> workbook.getSheetAt(<span class="hljs-number">0</span>); <span class="hljs-comment">//根据索引获取表</span><br>    <span class="hljs-comment">//获取行</span><br>    <span class="hljs-type">Row</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> sheet.getRow(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">//获取列,注意获取到的值的类型，如果类型不对也会报错</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> row.getCell(<span class="hljs-number">0</span>).getStringCellValue();<br>    System.out.println(value);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="07版读取操作"><a href="#07版读取操作" class="headerlink" title="07版读取操作"></a>07版读取操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">read07</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//获取文件流</span><br>    <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;07.xlsx&quot;</span>);<br>    <span class="hljs-comment">//创建工作簿</span><br>    <span class="hljs-type">Workbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XSSFWorkbook</span>(inputStream);<br>    <span class="hljs-comment">//获取工作表</span><br>    <span class="hljs-type">Sheet</span> <span class="hljs-variable">sheet</span> <span class="hljs-operator">=</span> workbook.getSheet(<span class="hljs-string">&quot;sheet0&quot;</span>);  <span class="hljs-comment">//根据表名获取表</span><br>    <span class="hljs-type">Sheet</span> <span class="hljs-variable">sheetAt</span> <span class="hljs-operator">=</span> workbook.getSheetAt(<span class="hljs-number">0</span>); <span class="hljs-comment">//根据索引获取表</span><br>    <span class="hljs-comment">//获取行</span><br>    <span class="hljs-type">Row</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> sheet.getRow(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">//获取列,注意获取到的值的类型，如果类型不对也会报错</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> row.getCell(<span class="hljs-number">0</span>).getStringCellValue();<br>    System.out.println(value);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="难点：获取值的操作-需要判断单元格的类型"><a href="#难点：获取值的操作-需要判断单元格的类型" class="headerlink" title="难点：获取值的操作(需要判断单元格的类型)"></a>难点：获取值的操作(需要判断单元格的类型)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readExcel</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;E:\\codespace\\javaCode\\POI\\src\\main\\java\\com\\czr\\demo\\test.xlsx&quot;</span>);<br>    <span class="hljs-type">Workbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XSSFWorkbook</span>(inputStream);<br>    <span class="hljs-type">Sheet</span> <span class="hljs-variable">sheetAt</span> <span class="hljs-operator">=</span> workbook.getSheetAt(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">Row</span> <span class="hljs-variable">rowTitle</span> <span class="hljs-operator">=</span> sheetAt.getRow(<span class="hljs-number">0</span>);  <span class="hljs-comment">//获取到头部标题行</span><br><br>    <span class="hljs-keyword">if</span> (rowTitle != <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">//如果标题不为空</span><br>        <span class="hljs-comment">//获取到头部标题行的列数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">physicalNumberOfCells</span> <span class="hljs-operator">=</span> rowTitle.getPhysicalNumberOfCells();<br>        <span class="hljs-comment">//对头部标题行进行遍历</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">cellNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; cellNum &lt; physicalNumberOfCells; cellNum++) &#123;<br>            <span class="hljs-comment">//获取到行内一列的信息</span><br>            <span class="hljs-type">Cell</span> <span class="hljs-variable">cell</span> <span class="hljs-operator">=</span> rowTitle.getCell(cellNum);<br>            <span class="hljs-comment">//判断列是否为空</span><br>            <span class="hljs-keyword">if</span> (cell != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">//获取到单元格的类型</span><br>                <span class="hljs-type">CellType</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> cell.getCellType();<br>                <span class="hljs-comment">//判断是什么类型</span><br>                <span class="hljs-keyword">if</span> (type == CellType.STRING) &#123;<br>                    System.out.print(cell.getStringCellValue() + <span class="hljs-string">&quot; | &quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>        System.out.println();<br>    &#125;<br>    <span class="hljs-comment">//获取表中其他内容</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">rowCount</span> <span class="hljs-operator">=</span> sheetAt.getPhysicalNumberOfRows();<br>    <span class="hljs-comment">//遍历行</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">rowNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; rowNum &lt; rowCount; rowNum++) &#123;<br>        <span class="hljs-comment">//获取到每一行</span><br>        <span class="hljs-type">Row</span> <span class="hljs-variable">rowData</span> <span class="hljs-operator">=</span> sheetAt.getRow(rowNum);<br>        <span class="hljs-comment">//判断行是否为空</span><br>        <span class="hljs-keyword">if</span> (rowData != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//根据标题行的列数获取到每一行的列数</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">cellCount</span> <span class="hljs-operator">=</span> rowTitle.getPhysicalNumberOfCells();<br>            <span class="hljs-comment">//获取到每一行的每一列</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">cellNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; cellNum &lt; cellCount; cellNum++) &#123;<br>                System.out.print(<span class="hljs-string">&quot;[&quot;</span> + (rowNum + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;-&quot;</span> + (cellNum + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;]&quot;</span>);<br>                <span class="hljs-type">Cell</span> <span class="hljs-variable">cell</span> <span class="hljs-operator">=</span> rowData.getCell(cellNum);<br>                <span class="hljs-comment">//判断列是否为空</span><br>                <span class="hljs-keyword">if</span> (cell != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">//获取到单元格的类型</span><br>                    <span class="hljs-type">CellType</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> cell.getCellType();<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">cellValue</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>                    <span class="hljs-comment">//判断是什么类型</span><br>                    <span class="hljs-keyword">switch</span> (type) &#123;<br>                            <span class="hljs-comment">//字符串类型</span><br>                        <span class="hljs-keyword">case</span> STRING: &#123;<br>                            System.out.print(<span class="hljs-string">&quot;字符串类型： &quot;</span>);<br>                            cellValue = String.valueOf(cell.getStringCellValue());<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<br>                            <span class="hljs-comment">//数字类型,分为日期和数字两种</span><br>                        <span class="hljs-keyword">case</span> NUMERIC: &#123;<br>                            <span class="hljs-comment">//判断是否为日期类型</span><br>                            <span class="hljs-keyword">if</span> (DateUtil.isCellDateFormatted(cell)) &#123;<br>                                System.out.print(<span class="hljs-string">&quot;日期类型： &quot;</span>);<br>                                <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> cell.getDateCellValue();<br>                                <span class="hljs-comment">//使用工具类把日期转换成字符串</span><br>                                cellValue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DateTime</span>(date).toString(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);<br>                                <span class="hljs-comment">//cellValue = String.valueOf(cell.getDateCellValue());</span><br>                            &#125; <span class="hljs-keyword">else</span> &#123;<br>                                <span class="hljs-comment">//获取到数字类型的值,转换为字符串，防止数字过大</span><br>                                System.out.print(<span class="hljs-string">&quot;数字类型： &quot;</span>);<br>                                cellValue = String.valueOf(cell.getNumericCellValue());<br>                            &#125;<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<br>                            <span class="hljs-comment">//布尔类型</span><br>                        <span class="hljs-keyword">case</span> BOOLEAN: &#123;<br>                            System.out.print(<span class="hljs-string">&quot;布尔类型： &quot;</span>);<br>                            cellValue = String.valueOf(cell.getBooleanCellValue());<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<br>                            <span class="hljs-comment">//公式类型</span><br>                        <span class="hljs-keyword">case</span> FORMULA: &#123;<br>                            System.out.print(<span class="hljs-string">&quot;公式类型： &quot;</span>);<br>                            cellValue = String.valueOf(cell.getCellFormula());<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<br>                            <span class="hljs-comment">//空类型</span><br>                        <span class="hljs-keyword">case</span> BLANK: &#123;<br>                            System.out.print(<span class="hljs-string">&quot;空类型： &quot;</span>);<br>                            cellValue = <span class="hljs-string">&quot;&quot;</span>;<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<br>                            <span class="hljs-comment">//错误类型</span><br>                        <span class="hljs-keyword">case</span> ERROR: &#123;<br>                            System.out.print(<span class="hljs-string">&quot;错误类型： &quot;</span>);<br>                            cellValue = <span class="hljs-string">&quot;&quot;</span>;<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<br>                    &#125;<br>                    System.out.println(cellValue);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    inputStream.close();<br>    workbook.close();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot整合Redis</title>
    <link href="/2022/08/12/SpringBoot%E6%95%B4%E5%90%88Redis/"/>
    <url>/2022/08/12/SpringBoot%E6%95%B4%E5%90%88Redis/</url>
    
    <content type="html"><![CDATA[<h3 id="SpringBoot整合Redis"><a href="#SpringBoot整合Redis" class="headerlink" title="SpringBoot整合Redis"></a>SpringBoot整合Redis</h3><h4 id="1-导入redis依赖"><a href="#1-导入redis依赖" class="headerlink" title="1.导入redis依赖"></a>1.导入redis依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml">        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--        阿里巴巴的序列化--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-增加redis配置类"><a href="#2-增加redis配置类" class="headerlink" title="2.增加redis配置类"></a>2.增加redis配置类</h4><p>在com.xxx下新建RedisConfig类</p><p>这个配置类主要是重新定义redis的key和value的<strong>序列化方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.accounting.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> chenzj9</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022年01月15日 22:23</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@SuppressWarnings(value = &#123;&quot;unchecked&quot;, &quot;rawtypes&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;<br>        RedisTemplate&lt;Object, Object&gt; redisTemplate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br>        redisTemplate.setConnectionFactory(redisConnectionFactory);<br><br>        <span class="hljs-comment">//FastJsonRedisSerializer serializer = new FastJsonRedisSerializer(Object.class);</span><br>        <span class="hljs-type">GenericJackson2JsonRedisSerializer</span> <span class="hljs-variable">genericJackson2JsonRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericJackson2JsonRedisSerializer</span>();<br><br>        <span class="hljs-comment">//使用StringRedisSerializer来序列化和反序列化key</span><br>        redisTemplate.setKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>        redisTemplate.setValueSerializer(genericJackson2JsonRedisSerializer);<br><br>        redisTemplate.setHashKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>        redisTemplate.setHashValueSerializer(genericJackson2JsonRedisSerializer);<br><br>        redisTemplate.afterPropertiesSet();<br>        <span class="hljs-keyword">return</span> redisTemplate;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="3-在application-yml中添加redis连接等配置"><a href="#3-在application-yml中添加redis连接等配置" class="headerlink" title="3.在application.yml中添加redis连接等配置"></a>3.在application.yml中添加redis连接等配置</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment">#redis配置</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-attr">password:</span><br>    <span class="hljs-attr">jedis:</span><br>      <span class="hljs-attr">pool:</span><br>        <span class="hljs-attr">max-active:</span> <span class="hljs-number">8</span><br>        <span class="hljs-attr">min-idle:</span> <span class="hljs-number">8</span><br>        <span class="hljs-attr">max-wait:</span> <span class="hljs-number">-1</span><br>    <span class="hljs-attr">timeout:</span> <span class="hljs-number">30000</span><br></code></pre></td></tr></table></figure><h4 id="4-添加redis的工具类"><a href="#4-添加redis的工具类" class="headerlink" title="4.添加redis的工具类"></a>4.添加redis的工具类</h4><p>这个主要是提供了一些get、set等方法，通过这些方法在redis中存储和获取数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.accounting.utils;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.BoundSetOperations;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.HashOperations;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.ValueOperations;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> chenzj9</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> redis工具类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022年01月15日 22:33</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@SuppressWarnings(value = &#123;&quot;unchecked&quot;, &quot;rawtypes&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisCache</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> RedisTemplate redisTemplate;<br><br>    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCacheObject</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key, <span class="hljs-keyword">final</span> T value)</span> &#123;<br>        redisTemplate.opsForValue().set(key, value);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key      键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value    值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> timeout  超时时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> timeUnit 时间粒度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span>: 设置缓存的值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span>: chenzj9</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span>: 2022/1/15 22:44</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCacheObject</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key, <span class="hljs-keyword">final</span> T value, <span class="hljs-keyword">final</span> Integer timeout, <span class="hljs-keyword">final</span> TimeUnit timeUnit)</span> &#123;<br>        redisTemplate.opsForValue().set(key, value, timeout, timeUnit);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> timeout  超时时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> timeUnit 时间粒度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> boolean 是否成功 true成功 false失败</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span>: 设置有效时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span>: chenzj9</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span>: 2022/1/15 22:43</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">expire</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key, <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> timeout, <span class="hljs-keyword">final</span> TimeUnit timeUnit)</span> &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.expire(key, timeout, timeUnit);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> T</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span>: 获取缓存</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span>: chenzj9</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span>: 2022/1/15 22:46</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">getCacheObject</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key)</span> &#123;<br>        ValueOperations&lt;String, T&gt; valueOperations = redisTemplate.opsForValue();<br>        <span class="hljs-keyword">return</span> valueOperations.get(key);<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> boolean</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span>: 删除key对应的缓存</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span>: chenzj9</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span>: 2022/1/15 22:48</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">deleteObject</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key)</span> &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.delete(key);<br>    &#125;<br><br>    <span class="hljs-comment">//删除集合对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">deleteObject</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Collection collection)</span> &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.delete(collection);<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dataList</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> long 缓存的对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span>: 缓存list数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span>: chenzj9</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span>: 2022/1/15 23:00</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-type">long</span> <span class="hljs-title function_">setObjectList</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key, <span class="hljs-keyword">final</span> List&lt;T&gt; dataList)</span> &#123;<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> redisTemplate.opsForList().rightPushAll(key, dataList);<br>        <span class="hljs-keyword">return</span> count == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : count;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.util.List&lt;T&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span>: 获得list数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span>: chenzj9</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span>: 2022/1/15 23:03</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; List&lt;T&gt; <span class="hljs-title function_">getCacheList</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key)</span> &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForList().range(key, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dataSet</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> org.springframework.data.redis.core.BoundSetOperations&lt;java.lang.String, T&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span>: 缓存set</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span>: chenzj9</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span>: 2022/1/15 23:06</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; BoundSetOperations&lt;String, T&gt; <span class="hljs-title function_">setCache</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key, <span class="hljs-keyword">final</span> Set&lt;T&gt; dataSet)</span> &#123;<br>        BoundSetOperations&lt;String, T&gt; setOperations = redisTemplate.boundSetOps(key);<br>        Iterator&lt;T&gt; it = dataSet.iterator();<br>        <span class="hljs-keyword">while</span> (it.hasNext()) &#123;<br>            setOperations.add(it.next());<br>        &#125;<br>        <span class="hljs-keyword">return</span> setOperations;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.util.Set&lt;T&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span>: 获得缓存的set</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span>: chenzj9</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span>: 2022/1/15 23:07</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; Set&lt;T&gt; <span class="hljs-title function_">getCacheSet</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key)</span> &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForSet().members(key);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dataMap</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span>: 缓存map</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span>: chenzj9</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span>: 2022/1/15 23:09</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCacheMap</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key, <span class="hljs-keyword">final</span> Map&lt;String, T&gt; dataMap)</span> &#123;<br>        <span class="hljs-keyword">if</span> (dataMap != <span class="hljs-literal">null</span>) &#123;<br>            redisTemplate.opsForHash().putAll(key, dataMap);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.util.Map&lt;java.lang.String, T&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span>: 获得缓存的map</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span>: chenzj9</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span>: 2022/1/15 23:10</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; Map&lt;String, T&gt; <span class="hljs-title function_">getCacheSMap</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key)</span> &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForHash().entries(key);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key redis键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> hKey hash键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span>: 往hash中存入数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span>: chenzj9</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span>: 2022/1/15 23:12</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCacheMapValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key, <span class="hljs-keyword">final</span> String hKey, <span class="hljs-keyword">final</span> T value)</span> &#123;<br>        redisTemplate.opsForHash().put(key, hKey, value);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span>: 获取Hash中的值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span>: chenzj9</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span>: 2022/1/15 23:15</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key redis键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> hKey hash键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> T hash中的对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">getCacheMapValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key,<span class="hljs-keyword">final</span> String hKey)</span> &#123;<br>        HashOperations&lt;String,String,T&gt; hashOperations = redisTemplate.opsForHash();<br>        <span class="hljs-keyword">return</span> hashOperations.get(key,hKey);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span>: 删除hash中的数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span>: chenzj9</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span>: 2022/1/15 23:18</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> hKey</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteCacheMapValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key,<span class="hljs-keyword">final</span> String hKey)</span>&#123;<br>        <span class="hljs-type">HashOperations</span> <span class="hljs-variable">hashOperations</span> <span class="hljs-operator">=</span> redisTemplate.opsForHash();<br>        hashOperations.delete(key,hKey);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span>: 获得多个hash中的数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span>: chenzj9</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span>: 2022/1/15 23:20</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> hKeys</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.util.List&lt;T&gt;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; List&lt;T&gt; <span class="hljs-title function_">getMultiCacheMapValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key,<span class="hljs-keyword">final</span> Collection&lt;Object&gt; hKeys)</span> &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForList().range(key, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span>: 获得缓存的基本对象列表</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span>: chenzj9</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span>: 2022/1/15 23:21</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pattern 字符串前缀</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.util.Collection&lt;java.lang.String&gt;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Collection&lt;String&gt; <span class="hljs-title function_">keys</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String pattern)</span>&#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.keys(pattern);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="5-测试"><a href="#5-测试" class="headerlink" title="5.测试"></a>5.测试</h4><p>添加一个测试方法测试是否可以正常使用redis</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> <span class="hljs-title class_">RedisCache</span> redisCache;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-built_in">void</span> <span class="hljs-title function_">redisCacheTest</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">//存储一个字符串到redis</span><br>    <span class="hljs-title class_">String</span> value = <span class="hljs-string">&quot;小陈学Redis&quot;</span>;<br>    <span class="hljs-comment">//定义一个key值</span><br>    <span class="hljs-title class_">String</span> key = <span class="hljs-string">&quot;xiaochen&quot;</span>;<br>    <span class="hljs-comment">//使用工具类中的方法存储到redis中</span><br>    redisCache.<span class="hljs-title function_">setCacheObject</span>(key,value);<br>    <span class="hljs-comment">//根据key值从redis中获取到存入的value</span><br>    <span class="hljs-title class_">String</span> cacheObj = redisCache.<span class="hljs-title function_">getCacheObject</span>(key);<br>    <span class="hljs-comment">//打印一下这个缓存值</span><br>    <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(cacheObj);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>mysql定时备份</title>
    <link href="/2022/08/12/mysql%E5%AE%9A%E6%97%B6%E5%A4%87%E4%BB%BD/"/>
    <url>/2022/08/12/mysql%E5%AE%9A%E6%97%B6%E5%A4%87%E4%BB%BD/</url>
    
    <content type="html"><![CDATA[<p><code>mysql</code>的安装目录为：<code>/var/lib/mysql</code> 下面咱们来一起完成自动备份<code>mysql</code>。</p><p>备份目录为：<code>/home/mydb</code><br>并且在每天下午<code>18:30</code>分以<code>mysqldata_2022_05_01.tar.gz</code>的压缩文件格式备份（<code>2022_05_01</code>是指备份执行时当天的日期）。</p><p>最后只保留最近15天的备份。</p><p>第一步：新建目录备份目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /home/ubuntu/demo/backup<br></code></pre></td></tr></table></figure><p>第二步：新建备份脚本</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">sudo vim sqlback.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><br>DUMP=/usr/bin/mysqldump <span class="hljs-comment">#mysqldump备份程序执行路径</span><br><br>OUT_DIR=/home/ubuntu/demo/backup/backsql <span class="hljs-comment">#备份文件存放路径</span><br><br>LINUX_USER=ubuntu <span class="hljs-comment">#系统用户名</span><br><br>DB_NAME=<span class="hljs-built_in">test</span> <span class="hljs-comment">#要备份的数据库名字</span><br><br>DB_USER=admin <span class="hljs-comment">#数据库账号 注意：非root用户要用备份参数 --skip-lock-tables，否则可能会报错</span><br><br>DB_PASS=**** <span class="hljs-comment">#数据库密码</span><br><br>DAYS=15 <span class="hljs-comment">#DAYS=15代表删除15天前的备份，即只保留最近15天的备份</span><br><br><span class="hljs-built_in">cd</span> <span class="hljs-variable">$OUT_DIR</span> <span class="hljs-comment">#进入备份存放目录</span><br><br>DATE=`<span class="hljs-built_in">date</span> +%Y_%m_%d` <span class="hljs-comment">#获取当前系统时间</span><br><br>OUT_SQL=<span class="hljs-string">&quot;<span class="hljs-variable">$DATE</span>.sql&quot;</span> <span class="hljs-comment">#备份数据库的文件名</span><br><br>TAR_SQL=<span class="hljs-string">&quot;mysqldata_<span class="hljs-variable">$DATE</span>.tar.gz&quot;</span> <span class="hljs-comment">#最终保存的数据库备份文件名</span><br><br><span class="hljs-variable">$DUMP</span> -u<span class="hljs-variable">$DB_USER</span> -p<span class="hljs-variable">$DB_PASS</span> <span class="hljs-variable">$DB_NAME</span> --default-character-set=utf8 --opt -Q -R --skip-lock-tables&gt; <span class="hljs-variable">$OUT_SQL</span> <span class="hljs-comment">#备份</span><br><br>tar -czf <span class="hljs-variable">$TAR_SQL</span> ./<span class="hljs-variable">$OUT_SQL</span> <span class="hljs-comment">#压缩为.tar.gz格式</span><br><br><span class="hljs-built_in">rm</span> <span class="hljs-variable">$OUT_SQL</span> <span class="hljs-comment">#删除.sql格式的备份文件</span><br><br><span class="hljs-built_in">chown</span> <span class="hljs-variable">$LINUX_USER</span>:<span class="hljs-variable">$LINUX_USER</span> <span class="hljs-variable">$OUT_DIR</span>/<span class="hljs-variable">$TAR_SQL</span> <span class="hljs-comment">#更改备份数据库文件的所有者</span><br><br>find <span class="hljs-variable">$OUT_DIR</span> -name <span class="hljs-string">&quot;mysqldata_*&quot;</span> -<span class="hljs-built_in">type</span> f -mtime +<span class="hljs-variable">$DAYS</span> -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">rm</span> &#123;&#125; \; <span class="hljs-comment">#删除15天前的备份文件(注意：&#123;&#125; \;中间有空格)</span><br></code></pre></td></tr></table></figure><p>第三步：设置定时执行，定时执行采用crontab</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">crontab -e<br><br><span class="hljs-comment"># m h dom mon dow user  command</span><br>1 1 * * * root /bin/sh /home/ubuntu/demo/backup/sqlback.sh<br><span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>第四步：修改了crontab的配置，咱们需要重启它。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">sudo service cron restart<br></code></pre></td></tr></table></figure><p>最后，进入备份目录，测试是否成功。</p><p>其中可以手动测试脚本是否有问题，测试代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/bin/sh /home/ubuntu/demo/backup/sqlback.sh<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
